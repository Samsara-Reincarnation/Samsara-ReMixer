#library "SMMACS"
#include "zcommon.acs"
#include "commonFuncs.acs"
#include "remixerFuncs.acs"

#define MAX_GAME_TYPES 34
#define MAX_ALTS 5
#define MONSTER_SLOT 72
#define MAXPERSLOT 20
#define MAX_ITEMS 15
#define MAX_STRING_ITEMS 6
#define MAX_ADDON_SETS 64

#include "Spawns.acs"
#include "SpawnsExtras.acs"

str SMMCVARINFO = "Stuff";
str SMMCHANGES = "Stuff";

str SAMSARA_CHANGELIST = "1.2";

str gameTypesStr[MAX_GAME_TYPES] = {
	"mm_doom", "mm_chex", "mm_heretic", "mm_wolf3d", "mm_hexen1", "mm_duke3d", "mm_marathon", "mm_quake1",
	"mm_rott", "mm_bstone", "mm_blood", "mm_strife", "mm_erad", "mm_c7", "mm_rmr", "mm_darkf", "mm_ipog",
	"mm_disrup", "mm_witch", "mm_halflife", "mm_sw", "mm_cm", "mm_ps", "mm_rr", "mm_quake2", "mm_hexen2",
	"mm_goldeneye", "mm_catacomb", "mm_painkiller", "mm_unreal", "mm_rtcw", "mm_quake3", "mm_descent", "mm_deusex"
};

str gameSetsStr[MAX_GAME_TYPES] = {
	"SetDoom", "SetChex", "SetHeretic", "SetWolf3d", "SetHexen1", "SetDuke3D", "SetMarathon", "SetQuake1", "SetRoTT", "SetBStone",
	"SetBlood", "SetStrife", "SetErad", "SetC7", "SetRmr", "SetDarkF", "SetIPOG", "SetDisrup", "SetWitch", "SetHL", "SetSW", "SetCM",
	"SetExhumed", "SetRR", "SetQuake2", "SetHexen2", "SetGoldeneye", "SetCatacomb", "SetPainkiller", "SetUnreal", "SetRTCW", "SetQuake3", "SetDescent", "SetDeusEx"
};

str monsterReplacementsStr[MONSTER_SLOT] = {
	"mm_replace_zombieman", "mm_replace_shotgunguy", "mm_replace_imp", "mm_replace_chaingunguy", "mm_replace_supershotgunguy",
	"mm_replace_demon", "mm_replace_darkimp", "mm_replace_spectre", "mm_replace_blooddemon", "mm_replace_lostsoul",
	"mm_replace_cacodemon", "mm_replace_revenant", "mm_replace_cacolantern", "mm_replace_painelemental", "mm_replace_hellknight",
	"mm_replace_arachnotron", "mm_replace_fatso", "mm_replace_abaddon", "mm_replace_archvile", "mm_replace_baronofhell",
	"mm_replace_hectebus", "mm_replace_belphegor", "mm_replace_spidermastermind", "mm_replace_cyberdemon", "mm_replace_wolfensteinss",
	"mm_replace_flemoiduscommonus", "mm_replace_flemoidusbipedicus", "mm_replace_armoredflemoidusbipedicus", "mm_replace_flemoidusstridicus", "mm_replace_larva",
	"mm_replace_flemmine", "mm_replace_flemoiduscycloptiscommonus", "mm_replace_supercycloptis", "mm_replace_quadrumpus", "mm_replace_flemoidusmaximus",
	"mm_replace_flembrane", "mm_replace_flembomination", "mm_replace_snotfolus", "mm_replace_gargoyle", "mm_replace_firegargoyle",
	"mm_replace_golem", "mm_replace_golemghost", "mm_replace_nitrogolem", "mm_replace_nitrogolemghost", "mm_replace_discipleofdsparil",
	"mm_replace_undeadwarrior", "mm_replace_undeadwarriorghost", "mm_replace_sabreclaw", "mm_replace_ophidian", "mm_replace_weredragon",
	"mm_replace_ironlich", "mm_replace_maulotaur", "mm_replace_dsparil", "mm_replace_chicken", "mm_replace_ettin",
	"mm_replace_afrit", "mm_replace_darkbishop", "mm_replace_centaur", "mm_replace_slaughtaur", "mm_replace_greenchaosserpent",
	"mm_replace_stalker", "mm_replace_stalkerboss", "mm_replace_wendigo", "mm_replace_reiver", "mm_replace_reiverburied",
	"mm_replace_brownchaosserpent", "mm_replace_traductus", "mm_replace_zedek", "mm_replace_menelkir", "mm_replace_heresiarch",
	"mm_replace_korax", "mm_replace_pig"
};

int gamePruneValues[MAX_GAME_TYPES][MAX_ADDON_SETS] = {
	{99,99,99},{99},{73},{64,64,64},{84,84,84},{52,52,52},{68},{54},{63,63,63,63,63},{64,64},{36},{59},{53,53,53,53,53},{64},{77},{61},{68,68,68,68,68},{62},{78},{26,26},{36},{65},{54},{36},{40},{32},{28},{69},{67},{54},{32},{50},{60},{26}
};

str doomModes[4] = { "SetDoom", "SetDoom64", "SetDoomRandom", "SetDoom64AbsolutionOutcast" };
str wolfModes[3] = { "SetWolf3D", "SetSpear", "SetTotenkopf" };
str dukeModes[2] = { "SetDuke3D", "SetDukeLAB" };
str hlModes[2] =   { "SetHL", "SetHLOP" };

int activeSets = 0;
int activeSets2 = 0;
int activeSetsA = 0;
int pickFromSets[MAX_GAME_TYPES + MAX_ADDON_SETS];
int amountOfGameTypes[MAX_GAME_TYPES + MAX_ADDON_SETS];
int maxSetsEnabled = 0;
int monsterProcessing = 0;
int pickClear = 0;
int maxAltSets = 4;
int totalMonsters = 0;

#define MAX_MAPS				500

//Addon set info, not directly used
str addons[MAX_GAME_TYPES] = {};
#include "ReMixerAPI.acs"

global int 2:alreadyshowedbs;
//global int 4:lastchosen;

// ReMixer spawn generator. Want Doom 2 enemies in Ultimate Doom? This can do that!
#include "SMM_Generator.acs"

// After many years, Naraka has finally arrived in Samsara (once ReMixer 2.0 arrives)!
#include "Naraka.acs"

Script "ReMixerInit" OPEN //667
{
	totalMonsters = GetLevelInfo(LEVELINFO_TOTAL_MONSTERS);

	alreadyshowedbs = 1;
	Delay(1);
	addonsProcessed = 1;
	Delay(4);
}

function void applyModifierToMonster(int property, str modifierCVar)
{
	int modifierValue = GetCVar(modifierCVar);

	if (modifierValue != 100)
	{
		int baseMonsterProperty = GetActorProperty(0,property);

		if (modifierValue <= -4)
		{
			SetActorProperty(0,property,FixedMul(baseMonsterProperty, 1.0 + (1.0 * (PlayerCount() - 1))));
		}
		else if (modifierValue == -3)
		{
			SetActorProperty(0,property,FixedMul(baseMonsterProperty, 1.0 + (0.75 * (PlayerCount() - 1))));
		}
		else if (modifierValue == -2)
		{
			SetActorProperty(0,property,FixedMul(baseMonsterProperty, 1.0 + (0.5 * (PlayerCount() - 1))));
		}
		else if (modifierValue == -1)
		{
			SetActorProperty(0,property,FixedMul(baseMonsterProperty, 1.0 + (0.25 * (PlayerCount() - 1))));
		}
		else
		{
			int modifiedProperty = baseMonsterProperty * modifierValue/100;
			int newMonsterProperty = modifiedProperty <= 0 ? 1 : modifiedProperty;

			SetActorProperty(0,property,newMonsterProperty);
		}
	}
}

Script "ReMixerSpawnScript" (int spawncode, int override, int monsterSlot) //668
{
	Switch(spawncode)
	{
		case 1:
			if(GetCVar("samsara_runninginzdoom"))
				SetActorFlag(0,"INTERPOLATEANGLES",1);
			/*
				if(SpawnForced("StrongHoldLoaded",0,0,0,0))
					ACS_NamedExecuteWithResult("Samsara_MonsterSpawn",0,0,0,0); //uncomment this for stronghold support, will deal with later
			*/

			int useSkill = GetCVar("mm_skilloverride");
			int skillToken = useSkill < 5 ? useSkill : GameSkill();
			GiveInventory("DifficultyToken", skillToken);

			if(random(1,100) <= (GetCVar("mm_invisiblemode")))
			{
				GiveInventory("InvisibleToken",1);
				SetActorProperty(0,APROP_Alpha,0);
			}

			if(random(1,100) <= (GetCVar("mm_ghostmode")))
			{
				GiveInventory("GhostToken",1);
				SetActorProperty(0,APROP_RenderStyle,STYLE_Translucent);
				SetActorProperty(0,APROP_Alpha,0.4);
			}

			if(random(1,100) <= (GetCVar("mm_flightmode")))
			{
				GiveInventory("FlightToken",1);
			}

			switch (GetCVar("mm_infightingmode"))
			{
				case -1:
					GiveInventory("NoInfightingToken", 1);
					break;
				case 1:
					GiveInventory("ForceInfightingToken", 1);
					break;
			}

			if(GetCVar("mm_dropmode") == 1)
			{
				GiveInventory("WeaponDropToken", 1);
			}

			if(GetCVar("mm_multiply") > 1 && !CheckInventory("MultiplyOverflowToken"))
			{
				int activator = ActivatorTID();
				int newTid = UniqueTID();
				str activatorClass = GetActorClass(0);
				int activatorX = GetActorX(0);
				int activatorY = GetActorY(0);
				int activatorZ = GetActorZ(0);
				int activatorAngle = GetActorAngle(0);

				GiveInventory("SamsaraThruSpeciesEnabler", 1);

				for(int g = 1; g < GetCVar("mm_multiply"); g++)
				{
					SpawnForced(activatorClass,activatorX,activatorY,activatorZ,newTid,0);
					SetActivator(newTid);
					SetActorAngle(0,activatorAngle);
					GiveInventory("MultiplyOverflowToken", 1);
					GiveInventory("SamsaraThruSpeciesEnabler", 1);
					applyModifierToMonster(APROP_Health,"mm_healthoverride");
					applyModifierToMonster(APROP_Speed,"mm_speedoverride");
					ThrustThing(random(0,256), 2, 0, 0);
					Thing_ChangeTID(0, activator);
				}
			}
			break;

		case 2:
			until(pickClear && (SinglePlayer() || timer() > 5) && PlayerCount() > 0)
				Delay(1);

			int setSelect, altSetSelect;
			if(maxSetsEnabled == 0)
			{
				ACS_NamedExecuteWithResult("ReMixer_PickActor",pickFromSets[setSelect],altSetSelect,monsterSlot);
				SetActorState(0,"Continue",1);
				break;
			}

			setSelect = random(1, maxSetsEnabled) - 1;
			int pickedSet = pickFromSets[setSelect];
			int amountOfGameTypesForPickedSet = amountOfGameTypes[pickedSet];

			switch(pickedSet)
			{
				//All other sets
				default:
					//SetActorState(0,gameSetsStr[pickedSet],true);
					break;

				case 0: // Doom
					int doomMode = GetCVar("mm_doommode");

					switch(doomMode)
					{
						default:
							altSetSelect = doomMode-1;
							break;

						case 0:
							while(amountOfGameTypesForPickedSet != 0)
							{
								altSetSelect = random(0,maxAltSets);
								if(amountOfGameTypesForPickedSet & 1<<altSetSelect)
									break;
							}

							switch(altSetSelect)
							{
								default:
								case 0:
									altSetSelect = GetCVar("mm_doomspawns") * 2;
									break;

								case 1:
									altSetSelect = 1 + GetCVar("mm_doom64spawns") * 2;
									break;
							}
							break;

						case 1:
							altSetSelect = GetCVar("mm_doomspawns") * 2;
							break;

						case 2:
							altSetSelect = 1 + GetCVar("mm_doom64spawns") * 2;
							break;

						case 3:
							switch(random(0,1))
							{
								default:
								case 0:
									altSetSelect = GetCVar("mm_doomspawns") * 2;
									break;

								case 1:
									altSetSelect = 1 + GetCVar("mm_doom64spawns") * 2;
									break;
							}

							break;
					}
					break;
				case 3: // Wolf3d
					int wolfMode = GetCVar("mm_wolfmode");

					switch(wolfMode)
					{
						default:
							altSetSelect = wolfMode-1;
							break;

						case 0: //doing this one the crude way
							while(amountOfGameTypesForPickedSet != 0)
							{
								altSetSelect = random(0,maxAltSets);
								if(amountOfGameTypesForPickedSet & 1<<altSetSelect)
									break;
							}
							break;

						case 4:
							altSetSelect = random(0,1);
							break;

						case 5:
							altSetSelect = random(0,2);
							break;
					}
					break;

				case 5:
					int dukeMode = GetCVar("mm_dukemode");

					switch(dukeMode)
					{
						default:
							altSetSelect = dukeMode-1;
							break;

						case 0:
							while(amountOfGameTypesForPickedSet != 0)
							{
								altSetSelect = random(0,maxAltSets);
								if(amountOfGameTypesForPickedSet & 1<<altSetSelect)
									break;
							}
							break;

						case 3:
							altSetSelect = random(0,1);
							break;
					}
					break;

				case 8:
					int rottMode = GetCVar("mm_rottmode");

					switch(rottMode)
					{
						default:
							altSetSelect = rottMode-1;
							break;

						case 0:
							altSetSelect = 0;
							break;

						case 1:
							altSetSelect = 1;
							break;

						case 2:
							altSetSelect = random(0,1);
							break;
					}
					break;

				case 19:
					int halfLifeMode = GetCVar("mm_halflifemode");

					switch(halfLifeMode)
					{
						default:
							altSetSelect = halfLifeMode-1;
							break;

						case 0:
							while(amountOfGameTypesForPickedSet != 0)
							{
								altSetSelect = random(0,maxAltSets);
								if(amountOfGameTypesForPickedSet & 1<<altSetSelect)
									break;
							}
							break;

						case 3:
							altSetSelect = random(0,1);
							break;
					}
					break;

				case 26:
					if(GetCVar("samsara_zscriptready") != 1)
					{
						altSetSelect = 1;
					}
					break;

				case 30:
					if(GetCVar("samsara_zscriptready") != 1)
					{
						altSetSelect = 1;
					}
					break;
			}

			if(GetCVar("mm_reducemonsters") < 99)
			{
				until(processedCounts) { Delay(1); }

				if(ACS_NamedExecuteWithResult("SMMReducer",gamePruneValues[pickedSet][altSetSelect],CheckFlag(0,"BOSSDEATH"),monsterSlot))
				{
					Thing_Remove(0);
					terminate;
				}
			}

			ACS_NamedExecuteWithResult("ReMixer_PickActor",pickedSet,altSetSelect,monsterSlot);
			SetActorState(0,"Continue",1);
			break;

		case 3:
			if(GetCVar("mm_multiply") > 1)
			{
				int multitoken = GetCVar("mm_multiply");
				GiveInventory("MultiplyToken", multitoken);
			}
			break;

		case 4:
			if(GetCVar("mm_dropmode") == 1)
			{
				GiveInventory("WeaponDropToken", 1);
			}
			break;
	}
}

Script "ReMixer_PickActor" (int monGame, int monAlt, int monSlot)
{
	if (GetCVar("sv_nomonsters")) { terminate; }

	int oldSpawnerTid = ActivatorTID();
	int newSpawnerTid = UniqueTID();
	int newMonTid = UniqueTID();
	int oldSlot = -1;
	int pick, maxPick;
	int totalChance, monsterSpawnChance;
	int useSkill = GetCVar("mm_skilloverride");
	int pickAddon = 0, addonOffsetTotal, addonPickOffset;
	int a = 0;
	int skillMod = ((GameSkill() * !useSkill) + ((useSkill > 0) * (useSkill - 1))) * 3;
	int chanceSkillMod = skillMod + 2;

	str actorClass = GetActorClass(0);
	bool shouldNotCountKill = StrRight(actorClass,9) == "Generator";
	bool stealthMonster = StrLeft(actorClass,7) == "Stealth";
	bool ghostMonster = CheckFlag(0,"GHOST");

	int monReplForSlot = GetCVar(monsterReplacementsStr[monSlot]);
	int debugReplForSlot = GetCVar("mm_replace_all");
	if (monReplForSlot != monSlot && monReplForSlot != -1)
	{
		oldSlot = monSlot;
		shouldNotCountKill = true;
		monSlot = monReplForSlot;
	}

	if (debugReplForSlot != -1)
	{
		oldSlot = monSlot;
		shouldNotCountKill = true;
		monSlot = debugReplForSlot;
	}

	if(monGame >= MAX_GAME_TYPES)
	{
		pickAddon = 1;
		monGame -= MAX_GAME_TYPES;
	}

	if(!pickAddon)
	{
		for(a = 0; a < MAXPERSLOT; a++)
		{
			monsterSpawnChance = monsterSelectStat[monGame][monAlt][monSlot][a][chanceSkillMod];

			if(monsterSpawnChance == 0)
				totalChance += 1;
			else if(monsterSpawnChance > 0)
				totalChance += monsterSpawnChance;

			if(StrLen(monsterSelectStr[monGame][monAlt][monSlot][a+1][0])==0)
			{
				maxPick = a;
				break;
			}
		}
	}
	else
	{
		int addonOffsetGame = monGame * MAX_ALTS * MONSTER_SLOT * MAXPERSLOT * 6;
		int addonOffsetAltGame = monAlt * MONSTER_SLOT * MAXPERSLOT * 6;
		int addonOffsetMonSlot = monSlot * MAXPERSLOT * 6;
		addonOffsetTotal = addonOffsetGame+addonOffsetAltGame+addonOffsetMonSlot;

		for(a = 0; a < MAXPERSLOT; a++)
		{
			int addonSetIndex = addonOffsetTotal + a;
			monsterSpawnChance = addonSetStats[addonSetIndex+chanceSkillMod];

			if(monsterSpawnChance == 0)
				totalChance += 1;
			else if(monsterSpawnChance > 0)
				totalChance += monsterSpawnChance;

			if(StrLen(addonSets[addonSetIndex]) == 0)
			{
				maxPick = a;
				break;
			}
		}
	}

	if(maxPick > 0)
	{
		int choose = random(1,totalChance);
		int currentChance = 0, newChance = 0;

		for(a = 0; a <= maxPick; a++)
		{
			if(!pickAddon)
			{
				newChance = monsterSelectStat[monGame][monAlt][monSlot][a][chanceSkillMod];
				if(newChance == 0) newChance = 1;
				else if(newChance < 0) continue;
				if(a > 0)
				{
					if(choose <= (currentChance + newChance) && choose > currentChance)
					{
						pick = a;
						break;
					}
					else
						currentChance += newChance;
				}
				else if(choose <= newChance)
				{
					pick = a;
				}
			}
			else
			{
				newChance = addonSetStats[addonOffsetTotal+(a*6)+chanceSkillMod];
				if(newChance == 0) newChance = 1;
				else if(newChance < 0) continue;
				if(a > 0)
				{
					if(choose <= (currentChance + newChance) && choose > currentChance)
					{
						pick = a;
						break;
					}
					else
						currentChance += newChance;
				}
				else if(choose <= newChance)
				{
					pick = a;
				}
				addonPickOffset = pick * 6;
			}
		}
	}

	int healthSkillMod = skillMod + 1;
	int tokenSkillMod = 1 + (skillMod / 3);
	int speed, health;
	str token, monster;

	if (!pickAddon)
	{
		if (maxSetsEnabled != 0)
		{
			speed = monsterSelectStat[monGame][monAlt][monSlot][pick][skillMod];
			health = monsterSelectStat[monGame][monAlt][monSlot][pick][healthSkillMod];
			token = monsterSelectStr[monGame][monAlt][monSlot][pick][tokenSkillMod];
			monster = monsterSelectStr[monGame][monAlt][monSlot][pick][0];
		}
		else
		{
			speed = extrasSelectStat[0][monAlt][monSlot][pick][skillMod];
			health = extrasSelectStat[0][monAlt][monSlot][pick][healthSkillMod];
			token = extrasSelectStr[0][monAlt][monSlot][pick][tokenSkillMod];
			monster = extrasSelectStr[0][monAlt][monSlot][pick][0];
		}
	}
	else
	{
		speed = addonSetStats[addonOffsetTotal+addonPickOffset+skillMod];
		health = addonSetStats[addonOffsetTotal+addonPickOffset+healthSkillMod];
		token = addonSetStats[addonOffsetTotal+addonPickOffset+tokenSkillMod];
		monster = addonSets[addonOffsetTotal];
	}

	SpawnForced(monster,GetActorX(0),GetActorY(0),GetActorZ(0),newMonTid);
	SetActorAngle(newMonTid, GetActorAngle(0));

	Thing_ChangeTID(0,newSpawnerTid);
	SetActivator(newMonTid);

	if (!(monSlot == 6|7|8|9|14|15|16|30|31|37|38|48|51|52|66|67|68|69|70|71))
	{
		SetPointer(AAPTR_MASTER,newSpawnerTid,AAPTR_MASTER);
	}
	else
	{
		SetPointer(AAPTR_MASTER,newSpawnerTid);
	}

	int alert = SetPointer(AAPTR_TARGET,newSpawnerTid,AAPTR_TARGET);
	SetPointer(AAPTR_TRACER,newSpawnerTid,AAPTR_TRACER);

	SetActivator(newSpawnerTid);

	bool ambush = GetUserVariable(0,"user_ambush");
	bool dormant = GetUserVariable(0,"user_dormant");
	int userArgs[5] = {
		GetUserArray(0,"user_args",0),
		GetUserArray(0,"user_args",1),
		GetUserArray(0,"user_args",2),
		GetUserArray(0,"user_args",3),
		GetUserArray(0,"user_args",4)
	};
	int userSpecial = GetUserVariable(0,"user_special");

	if (oldSlot != -1 && monReplForSlot != oldSlot && monReplForSlot != -1)
	{
		// Check for monsters with A_BossDeath calls, non-bosses should instantly call for A_KillMaster
		if(monSlot != 15 && monSlot != 16 && monSlot != 19 && monSlot != 22 && monSlot != 23 && monSlot != 50 && monSlot != 51 && monSlot != 52 && monSlot != 66 && monSlot != 67 && monSlot != 68 && monSlot != 69 && monSlot != 70)
		{
			Thing_Destroy(newSpawnerTid,0,0);
		}
	}

	Thing_ChangeTID(0,oldSpawnerTid);
	SetActivator(newMonTid);
	Thing_ChangeTID(0,oldSpawnerTid);

	SetActorProperty(0,APROP_Ambush,ambush);
	SetThingSpecial(0,userSpecial,userArgs[0],userArgs[1],userArgs[2],userArgs[3],userArgs[4]);

	if (dormant)
	{
		Thing_Deactivate(0);
	}
	else if (!ambush && alert)
	{
		ACS_NamedExecuteWithResult("ReMixerAwakenMonster");
	}

	if (speed != 0)
	{
		SetActorProperty(0,APROP_Speed,FixedMul(GetActorProperty(0,APROP_Speed),speed));
	}
	if (health != 0)
	{
		SetActorProperty(0,APROP_Health,FixedMul(GetActorProperty(0,APROP_Health),health));
	}
	if (StrLen(token) != 0)
	{
		GiveInventory(token,1);
	}

	applyModifierToMonster(APROP_Health,"mm_healthoverride");
	applyModifierToMonster(APROP_Speed,"mm_speedoverride");

	if (shouldNotCountKill)
	{
		if (GetCVar("samsara_zscriptready") == 1) { GiveInventory("SamsaraCountKillDisablerZS", 1); }
		else { GiveInventory("SamsaraCountKillDisabler", 1); }
	}

	if (stealthMonster)
	{
		GiveInventory("InvisibleToken", 1);
	}

	if (ghostMonster)
	{
		GiveInventory("GhostToken", 1);

		int monRenderStyle = GetActorProperty(0, APROP_RenderStyle);
		bool isOpaque = monRenderStyle == STYLE_Normal || (monRenderStyle == STYLE_Translucent && CheckActorProperty(0, APROP_Alpha, 1.0));

		if (isOpaque && !CheckFlag(0, "INVISIBLE"))
		{
			SetActorProperty(0, APROP_RenderStyle, STYLE_Translucent);
			SetActorProperty(0, APROP_Alpha, 0.4);
		}
	}
}

Script "ReMixerAwakenMonster" (void)
{
	int seeAttempts = 5;
	until (CheckInventory("AlreadySpawned") || seeAttempts <= 0)
	{
		Delay(1);
		seeAttempts--;
	}

	wakeActivator();
}

Script "ReMixerInvasion" OPEN //670
{
	if(isZDoom())
		terminate;

	int spawnmode, oldmode;
	while(true)
	{
		int invasionState = GetInvasionState();
		if(invasionState == 1 || invasionState == 5)
		{
			spawnmode = GetCVar("mm_spawnmode");
			if(oldmode != spawnmode)
			{
				ACS_NamedExecuteWithResult("ReMixer_PickSets",0,0,0,0);
			}
		}
		Delay(1);
		oldmode = spawnmode;
	}
}

Script "MarathonTeleport" (void)
{
	if(GetCVar("mm_maratele") == 1)
	{
		GiveInventory("TeleportIn", 1);
	}
}

Script "ReMixerCVarCheck" (int pick) //680
{
	int response;

	Switch (pick)
	{
		case 1:
			response = GetCVar("mm_fakehitlerfire");
			break;

		case 2:
			response = GetCVar("mm_wolffastdeath");
			break;

		case 3:
			int useSkill = GetCVar("mm_skilloverride");
			response = useSkill < 5 ? useSkill : GameSkill();
			break;

		case 4:
			response = GetCVar("mm_goldeneyecorpsehitboxes");
			break;

		case 6:
			response = GetCVar("mm_protectorattacks") && (!GetCVar("samsara_moddedgame"));
			break;

		case 7:
			response = GetCVar("mm_quakezombiedeaths");
			break;

		case 8:
			response = GetCVar("mm_goldeneyepersistentcorpses");
			break;

		case 9:
			response = GetCVar("mm_fullradiusdmg");
			break;

		case 10:
			response = GetCVar("mm_rarespawns");
			break;

		case 11:
			response = GetCVar("mm_specpermdeath");
			break;

		case 12:
			if(GetCVar("mm_spawnmode") < 3)
			{
				response = 1;
			}
			break;

		case 13:
			response = GetCVar("mm_performancemode") && !isInvasion() && (!StrICmp(strparam(l:"CC_CARD_LOCKED"),"Undiscovered Card") == 0);
			break;
	}
	SetResultValue(response);
}

Script "ReMixer_PickSets" (void)
{
	if(monsterProcessing == 1)
		terminate;

	int clients = PlayerCount();
	int usingAddons, bitindex, bitindex2, b, p;
	int doomMode, wolfMode, dukeMode, shephardMode;

	activeSets = 0;
	activeSets2 = 0;
	activeSetsA = 0;
	monsterProcessing = 1;
	pickClear = 0;
	maxSetsEnabled = 0;
	for(int a = 0; a < MAX_GAME_TYPES; a++)
	{
		pickFromSets[a] = -1;
		amountOfGameTypes[a] = 0;
	}

	switch(GetCVar("mm_spawnmode"))
	{
		case 0:
		case 1:
			for(p = 0; p < clients; p++)
			{
				if(PlayerInGame(p) == true)
				{
					for(b = 0; b < MAX_GAME_TYPES; b++)
					{
						if(PlayerClass(p) == b)
						{
							if(b >= 32) { bitindex2 = 1<<b-32; }
							else { bitindex = 1<<b; }

							if(!(activesets & bitindex))
							{
								activesets += bitindex;
								if (GetCVar("samsara_moddedgame")) { b = 0; }
								pickFromSets[maxSetsEnabled] = b;
								maxSetsEnabled++;
							}
							else if(!(activeSets2 & bitindex2) && b >= 32)
							{
								activeSets2 += bitindex2;
								if (GetCVar("samsara_moddedgame")) { b = 0; }
								pickFromSets[maxSetsEnabled] = b;
								maxSetsEnabled++;
							}
							switch(b)
							{
								case 0:
									doomMode = 1<<GetUserCvar(p,"samsara_cl_doommode");
									if(!(amountOfGameTypes[b] & doomMode))
										amountOfGameTypes[b] += doomMode;
									break;

								case 3:
									wolfMode = 1<<GetUserCvar(p,"samsara_cl_wolfmode");
									if(!(amountOfGameTypes[b] & wolfMode))
										amountOfGameTypes[b] += wolfMode;
									break;

								case 5:
									dukeMode = 1<<GetUserCvar(p,"samsara_cl_dukemode");
									if(!(amountOfGameTypes[b] & dukeMode))
										amountOfGameTypes[b] += dukeMode;
									break;

								case 19:
									shephardMode = 1<<GetUserCvar(p,"samsara_cl_shephardmode");
									if(!(amountOfGameTypes[b] & shephardMode))
										amountOfGameTypes[b] += shephardMode;
									break;
							}
						}
					}
				}
				else
				{
					clients++;
				}
			}
			break;

		case 2:
			int bitindexa;
			for(b = 0; b < MAX_GAME_TYPES+addonCounter; b++)
			{
				usingAddons = b >= MAX_GAME_TYPES;
				if(usingAddons ? addonCVARs[b-MAX_GAME_TYPES] : GetCVar(gameTypesStr[b]))
				{
					if(usingAddons) { bitindexa = 1<<(b-MAX_GAME_TYPES); }
					else if(b >= 32) { bitindex2 = 1<<b-32; }
					else { bitindex = 1<<b; }

					if(usingAddons)
					{
						if(!(activesetsA & bitindexa))
						{
							activesetsA += bitindexa;
							pickFromSets[maxSetsEnabled] = b;
							maxSetsEnabled++;
						}
					}
					else
					{
						if(!(activesets & bitindex))
						{
							activesets += bitindex;
							pickFromSets[maxSetsEnabled] = b;
							maxSetsEnabled++;
						}
						else if(!(activeSets2 & bitindex2))
						{
							activeSets2 += bitindex2;
							pickFromSets[maxSetsEnabled] = b;
							maxSetsEnabled++;
						}
					}
					if(PlayerClass(p) == b && PlayerInGame(p))
					{
						switch(b)
						{
							case 0:
								doomMode = 1<<GetUserCvar(p,"samsara_cl_doommode");
								if(!(amountOfGameTypes[b] & doomMode))
									amountOfGameTypes[b] += doomMode;
								break;

							case 3:
								wolfMode = 1<<GetUserCvar(p,"samsara_cl_wolfmode");
								if(!(amountOfGameTypes[b] & wolfMode))
									amountOfGameTypes[b] += wolfMode;
								break;

							case 5:
								dukeMode = 1<<GetUserCvar(p,"samsara_cl_dukemode");
								if(!(amountOfGameTypes[b] & dukeMode))
									amountOfGameTypes[b] += dukeMode;
								break;

							case 19:
								shephardMode = 1<<GetUserCvar(p,"samsara_cl_shephardmode");
								if(!(amountOfGameTypes[b] & shephardMode))
									amountOfGameTypes[b] += shephardMode;
								break;
						}
					}
				}
			}
			break;

		case 3:
			int selectloop = 0;
			int randomvalue = GetCVar("mm_randomcycle");
			int randnum;
			int erroramount = 0;
			int randombit, randombit2, randombita;
			int randomtotal, randomtotal2, randomtotala;

			while (selectloop < randomvalue)
			{
				randombit = 0;
				randombit2 = 0;
				randombita = 0;
				randnum = random(0, MAX_GAME_TYPES+MAX_ADDON_SETS-1);
				usingAddons = randnum >= MAX_GAME_TYPES;
				if(!usingAddons)
				{
					if(randnum >= 32)
					{
						randombit2 = 1<<randnum-32;
					}
					else
					{
						randombit = randombit2<<randnum;
					}
				}
				else
				{
					randombita = 1<<randnum-MAX_GAME_TYPES;
				}

				if(usingAddons ? !GetCVar(addonCVARs[randnum-MAX_GAME_TYPES]) : !GetCVar(gameTypesStr[randnum])||((randomtotal & randombit) && (randomtotal2 & randombit2) && (randomtotala & randombita)))
				{
					if(erroramount > 65536)
					{
						selectloop = randnum;
						break;
					}
					else
					{
						erroramount++;
					}
				}
				else
				{
					pickFromSets[maxSetsEnabled] = randnum;
					maxSetsEnabled++;
					selectloop++;
					erroramount = 0;
					randomtotal += randombit;
					randomtotal2 += randombit2;
					randomtotala += randombita;

					if(PlayerClass(p) == randnum && PlayerInGame(p))
					{
						switch(randnum)
						{
							case 0:
								doomMode = 1<<GetUserCvar(p,"samsara_cl_doommode");
								if(!(amountOfGameTypes[randnum] & doomMode))
									amountOfGameTypes[randnum] += doomMode;
								break;

							case 3:
								wolfMode = 1<<GetUserCvar(p,"samsara_cl_wolfmode");
								if(!(amountOfGameTypes[randnum] & wolfMode))
									amountOfGameTypes[randnum] += wolfMode;
								break;

							case 5:
								dukeMode = 1<<GetUserCvar(p,"samsara_cl_dukemode");
								if(!(amountOfGameTypes[randnum] & dukeMode))
									amountOfGameTypes[randnum] += dukeMode;
								break;

							case 19:
								shephardMode = 1<<GetUserCvar(p,"samsara_cl_shephardmode");
								if(!(amountOfGameTypes[randnum] & shephardMode))
									amountOfGameTypes[randnum] += shephardMode;
								break;
						}
					}
				}
			}
			if(maxSetsEnabled == 0)
				PrintBold(s:"Congratulations, you hit an extremely rare bug! However, due to how the random cycle functionality works, this is not something we can fix. Now, go buy yourself a lottery ticket.");
			break;
	}
	//Call this manually. I prefer this to be done right away instead of after 1 tic.
	/*if(activesets & (1 << 30))
		ACS_NamedExecuteWithResult("RTCWPartsCacher");*/
	pickClear = 1;
	monsterProcessing = 0;
}

//Script "ReMixer_PickSets_OPEN" Open { ACS_NamedExecuteWithResult("ReMixer_PickSets",0,0,0,0); }
Script "ReMixer_PickSets_RESPAWN" RESPAWN { ACS_NamedExecuteWithResult("ReMixer_PickSets",0,0,0,0); }
//Script "ReMixer_PickSets_REOPEN" REOPEN { ACS_NamedExecuteWithResult("ReMixer_PickSets",0,0,0,0); }
Script "ReMixer_PickSets_ENTER" ENTER { ACS_NamedExecuteWithResult("ReMixer_PickSets",0,0,0,0);}
Script "ReMixer_PickSets_DISCONNECT" (int player) DISCONNECT { ACS_NamedExecuteWithResult("ReMixer_PickSets",0,0,0,0); }

Script "RemixerInvasionChecker" (void)
{
	if(isZDoom()) { SetResultValue(0); terminate; }
	SetResultValue(GetInvasionState() != -1);
}

Script "HeresiarchScriptTokens" (void) { SetResultValue(CheckInventory("HeresiarchScriptTokens")); }
Script "StrifeCrusaderDeathScript" (void) { if(ThingCountName("StrifeCrusaderReplacer", 0) == 0) Floor_LowerToLowest(667, 8); }

script "ReMixerTargetHealthChecker" (void)
{
	SetActivator(0, AAPTR_TARGET);

	SetResultValue(GetActorProperty(0, APROP_Health));
}

script "ReMixerPresetSelection" (void)
{
	switch(GetCVar("mm_presetvalue"))
	{
		case 0: // Vanilla

		// General Options
		SetCVar("mm_invisiblemode", 0);
		SetCVar("mm_ghostmode", 0);
		SetCVar("mm_flightmode", 0);
		SetCVar("mm_infightingmode", 0);
		SetCVar("mm_performancemode", true);
		SetCVar("mm_rarespawns", true);

		// Monster Spawning Options
		SetCVar("mm_spawnmode", 0);
		SetCVar("mm_randomcycle", 1);
		SetCVar("mm_dropmode", 0);
		SetCVar("mm_multiply", 1);
		SetCVar("mm_generate", 0);
		SetCVar("mm_reducemonsters", 99);

		// Monster Override Options
		SetCVar("mm_skilloverride", 1);
		SetCVar("mm_healthoverride", 100);
		SetCVar("mm_speedoverride", 100);

		// Monster Specific Options
		SetCVar("mm_specpermdeath", false);
		SetCVar("mm_wolffastdeath", false);
		SetCVar("mm_fakehitlerfire", false);
		SetCVar("mm_protectorattacks", true);
		SetCVar("mm_fullradiusdmg", false);
		SetCVar("mm_quakezombiedeaths", false);
		SetCVar("mm_redneckcusspack", 0);
		SetCVar("mm_goldeneyecorpsehitboxes", true);
		SetCVar("mm_goldeneyepersistentcorpses", false);

		// Enemy Modes
		SetCVar("mm_doommode", 1);
		SetCVar("mm_wolfmode", 1);
		SetCVar("mm_dukemode", 1);
		SetCVar("mm_rottmode", 0);
		SetCVar("mm_halflifemode", 1);

		// Enemy Spawns
		SetCVar("mm_doomspawns", 0);
		SetCVar("mm_doom64spawns", 0);

		// Monster Replacements
		SetCVar("mm_replace_zombieman", -1);
		SetCVar("mm_replace_shotgunguy", -1);
		SetCVar("mm_replace_imp", -1);
		SetCVar("mm_replace_chaingunguy", -1);
		SetCVar("mm_replace_supershotgunguy", -1);
		SetCVar("mm_replace_demon", -1);
		SetCVar("mm_replace_darkimp", -1);
		SetCVar("mm_replace_spectre", -1);
		SetCVar("mm_replace_blooddemon", -1);
		SetCVar("mm_replace_lostsoul", -1);
		SetCVar("mm_replace_cacodemon", -1);
		SetCVar("mm_replace_revenant", -1);
		SetCVar("mm_replace_cacolantern", -1);
		SetCVar("mm_replace_painelemental", -1);
		SetCVar("mm_replace_hellknight", -1);
		SetCVar("mm_replace_arachnotron", -1);
		SetCVar("mm_replace_fatso", -1);
		SetCVar("mm_replace_abaddon", -1);
		SetCVar("mm_replace_archvile", -1);
		SetCVar("mm_replace_baronofhell", -1);
		SetCVar("mm_replace_hectebus", -1);
		SetCVar("mm_replace_belphegor", -1);
		SetCVar("mm_replace_spidermastermind", -1);
		SetCVar("mm_replace_cyberdemon", -1);
		SetCVar("mm_replace_wolfensteinss", -1);
		SetCVar("mm_replace_flemoiduscommonus", -1);
		SetCVar("mm_replace_flemoidusbipedicus", -1);
		SetCVar("mm_replace_armoredflemoidusbipedicus", -1);
		SetCVar("mm_replace_flemoidusstridicus", -1);
		SetCVar("mm_replace_larva", -1);
		SetCVar("mm_replace_flemmine", -1);
		SetCVar("mm_replace_flemoiduscycloptiscommonus", -1);
		SetCVar("mm_replace_supercycloptis", -1);
		SetCVar("mm_replace_quadrumpus", -1);
		SetCVar("mm_replace_flemoidusmaximus", -1);
		SetCVar("mm_replace_flembrane", -1);
		SetCVar("mm_replace_flembomination", -1);
		SetCVar("mm_replace_snotfolus", -1);
		SetCVar("mm_replace_gargoyle", -1);
		SetCVar("mm_replace_firegargoyle", -1);
		SetCVar("mm_replace_golem", -1);
		SetCVar("mm_replace_golemghost", -1);
		SetCVar("mm_replace_nitrogolem", -1);
		SetCVar("mm_replace_nitrogolemghost", -1);
		SetCVar("mm_replace_discipleofdsparil", -1);
		SetCVar("mm_replace_undeadwarrior", -1);
		SetCVar("mm_replace_undeadwarriorghost", -1);
		SetCVar("mm_replace_sabreclaw", -1);
		SetCVar("mm_replace_ophidian", -1);
		SetCVar("mm_replace_weredragon", -1);
		SetCVar("mm_replace_ironlich", -1);
		SetCVar("mm_replace_maulotaur", -1);
		SetCVar("mm_replace_dsparil", -1);
		SetCVar("mm_replace_chicken", -1);
		SetCVar("mm_replace_ettin", -1);
		SetCVar("mm_replace_afrit", -1);
		SetCVar("mm_replace_darkbishop", -1);
		SetCVar("mm_replace_centaur", -1);
		SetCVar("mm_replace_slaughtaur", -1);
		SetCVar("mm_replace_greenchaosserpent", -1);
		SetCVar("mm_replace_stalker", -1);
		SetCVar("mm_replace_stalkerboss", -1);
		SetCVar("mm_replace_wendigo", -1);
		SetCVar("mm_replace_reiver", -1);
		SetCVar("mm_replace_reiverburied", -1);
		SetCVar("mm_replace_brownchaosserpent", -1);
		SetCVar("mm_replace_traductus", -1);
		SetCVar("mm_replace_zedek", -1);
		SetCVar("mm_replace_menelkir", -1);
		SetCVar("mm_replace_heresiarch", -1);
		SetCVar("mm_replace_korax", -1);
		SetCVar("mm_replace_pig", -1);

		// Spawn Options
		SetCVar("mm_doom", true);
		SetCVar("mm_chex", true);
		SetCVar("mm_heretic", true);
		SetCVar("mm_hexen1", true);
		SetCVar("mm_wolf3d", true);
		SetCVar("mm_duke3d", true);
		SetCVar("mm_marathon", true);
		SetCVar("mm_quake1", true);
		SetCVar("mm_rott", true);
		SetCVar("mm_bstone", true);
		SetCVar("mm_blood", true);
		SetCVar("mm_strife", true);
		SetCVar("mm_erad", true);
		SetCVar("mm_c7", true);
		SetCVar("mm_rmr", true);
		SetCVar("mm_darkf", true);
		SetCVar("mm_ipog", true);
		SetCVar("mm_disrup", true);
		SetCVar("mm_witch", true);
		SetCVar("mm_halflife", true);
		SetCVar("mm_sw", true);
		SetCVar("mm_cm", true);
		SetCVar("mm_ps", true);
		SetCVar("mm_rr", true);
		SetCVar("mm_quake2", true);
		SetCVar("mm_hexen2", true);
		SetCVar("mm_goldeneye", true);
		SetCVar("mm_catacomb", true);
		SetCVar("mm_painkiller", true);
		SetCVar("mm_unreal", true);
		SetCVar("mm_rtcw", true);
		SetCVar("mm_quake3", true);
		SetCVar("mm_descent", true);
		SetCVar("mm_deusex", true);
		break;

		case 1: // Samsara

		// General Options
		SetCVar("mm_invisiblemode", 0);
		SetCVar("mm_ghostmode", 0);
		SetCVar("mm_flightmode", 0);
		SetCVar("mm_infightingmode", 0);
		SetCVar("mm_performancemode", true);
		SetCVar("mm_rarespawns", true);

		// Monster Spawning Options
		SetCVar("mm_spawnmode", 0);
		SetCVar("mm_randomcycle", 1);
		SetCVar("mm_dropmode", 0);
		SetCVar("mm_multiply", 1);
		SetCVar("mm_generate", 0);
		SetCVar("mm_reducemonsters", 99);

		// Monster Override Options
		SetCVar("mm_skilloverride", 0);
		SetCVar("mm_healthoverride", 100);
		SetCVar("mm_speedoverride", 100);

		// Monster Specific Options
		SetCVar("mm_specpermdeath", true);
		SetCVar("mm_wolffastdeath", false);
		SetCVar("mm_fakehitlerfire", true);
		SetCVar("mm_protectorattacks", true);
		SetCVar("mm_fullradiusdmg", true);
		SetCVar("mm_quakezombiedeaths", false);
		SetCVar("mm_redneckcusspack", 0);
		SetCVar("mm_goldeneyecorpsehitboxes", true);
		SetCVar("mm_goldeneyepersistentcorpses", false);

		// Enemy Modes
		SetCVar("mm_doommode", 0);
		SetCVar("mm_wolfmode", 0);
		SetCVar("mm_dukemode", 0);
		SetCVar("mm_rottmode", 0);
		SetCVar("mm_halflifemode", 0);

		// Enemy Spawns
		SetCVar("mm_doomspawns", 0);
		SetCVar("mm_doom64spawns", 0);

		// Monster Replacements
		SetCVar("mm_replace_zombieman", -1);
		SetCVar("mm_replace_shotgunguy", -1);
		SetCVar("mm_replace_imp", -1);
		SetCVar("mm_replace_chaingunguy", -1);
		SetCVar("mm_replace_supershotgunguy", -1);
		SetCVar("mm_replace_demon", -1);
		SetCVar("mm_replace_darkimp", -1);
		SetCVar("mm_replace_spectre", -1);
		SetCVar("mm_replace_blooddemon", -1);
		SetCVar("mm_replace_lostsoul", -1);
		SetCVar("mm_replace_cacodemon", -1);
		SetCVar("mm_replace_revenant", -1);
		SetCVar("mm_replace_cacolantern", -1);
		SetCVar("mm_replace_painelemental", -1);
		SetCVar("mm_replace_hellknight", -1);
		SetCVar("mm_replace_arachnotron", -1);
		SetCVar("mm_replace_fatso", -1);
		SetCVar("mm_replace_abaddon", -1);
		SetCVar("mm_replace_archvile", -1);
		SetCVar("mm_replace_baronofhell", -1);
		SetCVar("mm_replace_hectebus", -1);
		SetCVar("mm_replace_belphegor", -1);
		SetCVar("mm_replace_spidermastermind", -1);
		SetCVar("mm_replace_cyberdemon", -1);
		SetCVar("mm_replace_wolfensteinss", -1);
		SetCVar("mm_replace_flemoiduscommonus", -1);
		SetCVar("mm_replace_flemoidusbipedicus", -1);
		SetCVar("mm_replace_armoredflemoidusbipedicus", -1);
		SetCVar("mm_replace_flemoidusstridicus", -1);
		SetCVar("mm_replace_larva", -1);
		SetCVar("mm_replace_flemmine", -1);
		SetCVar("mm_replace_flemoiduscycloptiscommonus", -1);
		SetCVar("mm_replace_supercycloptis", -1);
		SetCVar("mm_replace_quadrumpus", -1);
		SetCVar("mm_replace_flemoidusmaximus", -1);
		SetCVar("mm_replace_flembrane", -1);
		SetCVar("mm_replace_flembomination", -1);
		SetCVar("mm_replace_snotfolus", -1);
		SetCVar("mm_replace_gargoyle", -1);
		SetCVar("mm_replace_firegargoyle", -1);
		SetCVar("mm_replace_golem", -1);
		SetCVar("mm_replace_golemghost", -1);
		SetCVar("mm_replace_nitrogolem", -1);
		SetCVar("mm_replace_nitrogolemghost", -1);
		SetCVar("mm_replace_discipleofdsparil", -1);
		SetCVar("mm_replace_undeadwarrior", -1);
		SetCVar("mm_replace_undeadwarriorghost", -1);
		SetCVar("mm_replace_sabreclaw", -1);
		SetCVar("mm_replace_ophidian", -1);
		SetCVar("mm_replace_weredragon", -1);
		SetCVar("mm_replace_ironlich", -1);
		SetCVar("mm_replace_maulotaur", -1);
		SetCVar("mm_replace_dsparil", -1);
		SetCVar("mm_replace_chicken", -1);
		SetCVar("mm_replace_ettin", -1);
		SetCVar("mm_replace_afrit", -1);
		SetCVar("mm_replace_darkbishop", -1);
		SetCVar("mm_replace_centaur", -1);
		SetCVar("mm_replace_slaughtaur", -1);
		SetCVar("mm_replace_greenchaosserpent", -1);
		SetCVar("mm_replace_stalker", -1);
		SetCVar("mm_replace_stalkerboss", -1);
		SetCVar("mm_replace_wendigo", -1);
		SetCVar("mm_replace_reiver", -1);
		SetCVar("mm_replace_reiverburied", -1);
		SetCVar("mm_replace_brownchaosserpent", -1);
		SetCVar("mm_replace_traductus", -1);
		SetCVar("mm_replace_zedek", -1);
		SetCVar("mm_replace_menelkir", -1);
		SetCVar("mm_replace_heresiarch", -1);
		SetCVar("mm_replace_korax", -1);
		SetCVar("mm_replace_pig", -1);

		// Spawn Options
		SetCVar("mm_doom", true);
		SetCVar("mm_chex", true);
		SetCVar("mm_heretic", true);
		SetCVar("mm_hexen1", true);
		SetCVar("mm_wolf3d", true);
		SetCVar("mm_duke3d", true);
		SetCVar("mm_marathon", true);
		SetCVar("mm_quake1", true);
		SetCVar("mm_rott", true);
		SetCVar("mm_bstone", true);
		SetCVar("mm_blood", true);
		SetCVar("mm_strife", true);
		SetCVar("mm_erad", true);
		SetCVar("mm_c7", true);
		SetCVar("mm_rmr", true);
		SetCVar("mm_darkf", true);
		SetCVar("mm_ipog", true);
		SetCVar("mm_disrup", true);
		SetCVar("mm_witch", true);
		SetCVar("mm_halflife", true);
		SetCVar("mm_sw", true);
		SetCVar("mm_cm", true);
		SetCVar("mm_ps", true);
		SetCVar("mm_rr", true);
		SetCVar("mm_quake2", true);
		SetCVar("mm_hexen2", true);
		SetCVar("mm_goldeneye", true);
		SetCVar("mm_catacomb", true);
		SetCVar("mm_painkiller", true);
		SetCVar("mm_unreal", true);
		SetCVar("mm_rtcw", true);
		SetCVar("mm_quake3", true);
		SetCVar("mm_descent", true);
		SetCVar("mm_deusex", true);
		break;

		case 2: // Samsara Reincarnation

		// General Options
		SetCVar("mm_invisiblemode", 0);
		SetCVar("mm_ghostmode", 0);
		SetCVar("mm_flightmode", 0);
		SetCVar("mm_infightingmode", 0);
		SetCVar("mm_performancemode", true);
		SetCVar("mm_rarespawns", true);

		// Monster Spawning Options
		SetCVar("mm_spawnmode", 0);
		SetCVar("mm_randomcycle", 1);
		SetCVar("mm_dropmode", 1);
		SetCVar("mm_multiply", 1);
		SetCVar("mm_generate", 0);
		SetCVar("mm_reducemonsters", 0);

		// Monster Override Options
		SetCVar("mm_skilloverride", 0);
		SetCVar("mm_healthoverride", 100);
		SetCVar("mm_speedoverride", 100);

		// Monster Specific Options
		SetCVar("mm_specpermdeath", true);
		SetCVar("mm_wolffastdeath", false);
		SetCVar("mm_fakehitlerfire", true);
		SetCVar("mm_protectorattacks", true);
		SetCVar("mm_fullradiusdmg", true);
		SetCVar("mm_quakezombiedeaths", false);
		SetCVar("mm_redneckcusspack", 0);
		SetCVar("mm_goldeneyecorpsehitboxes", true);
		SetCVar("mm_goldeneyepersistentcorpses", false);

		// Enemy Modes
		SetCVar("mm_doommode", 0);
		SetCVar("mm_wolfmode", 0);
		SetCVar("mm_dukemode", 0);
		SetCVar("mm_rottmode", 2);
		SetCVar("mm_halflifemode", 0);

		// Enemy Spawns
		SetCVar("mm_doomspawns", 1);
		SetCVar("mm_doom64spawns", 1);

		// Monster Replacements
		SetCVar("mm_replace_zombieman", -1);
		SetCVar("mm_replace_shotgunguy", -1);
		SetCVar("mm_replace_imp", -1);
		SetCVar("mm_replace_chaingunguy", -1);
		SetCVar("mm_replace_supershotgunguy", -1);
		SetCVar("mm_replace_demon", -1);
		SetCVar("mm_replace_darkimp", -1);
		SetCVar("mm_replace_spectre", -1);
		SetCVar("mm_replace_blooddemon", -1);
		SetCVar("mm_replace_lostsoul", -1);
		SetCVar("mm_replace_cacodemon", -1);
		SetCVar("mm_replace_revenant", -1);
		SetCVar("mm_replace_cacolantern", -1);
		SetCVar("mm_replace_painelemental", -1);
		SetCVar("mm_replace_hellknight", -1);
		SetCVar("mm_replace_arachnotron", -1);
		SetCVar("mm_replace_fatso", -1);
		SetCVar("mm_replace_abaddon", -1);
		SetCVar("mm_replace_archvile", -1);
		SetCVar("mm_replace_baronofhell", -1);
		SetCVar("mm_replace_hectebus", -1);
		SetCVar("mm_replace_belphegor", -1);
		SetCVar("mm_replace_spidermastermind", -1);
		SetCVar("mm_replace_cyberdemon", -1);
		SetCVar("mm_replace_wolfensteinss", -1);
		SetCVar("mm_replace_flemoiduscommonus", -1);
		SetCVar("mm_replace_flemoidusbipedicus", -1);
		SetCVar("mm_replace_armoredflemoidusbipedicus", -1);
		SetCVar("mm_replace_flemoidusstridicus", -1);
		SetCVar("mm_replace_larva", -1);
		SetCVar("mm_replace_flemmine", -1);
		SetCVar("mm_replace_flemoiduscycloptiscommonus", -1);
		SetCVar("mm_replace_supercycloptis", -1);
		SetCVar("mm_replace_quadrumpus", -1);
		SetCVar("mm_replace_flemoidusmaximus", -1);
		SetCVar("mm_replace_flembrane", -1);
		SetCVar("mm_replace_flembomination", -1);
		SetCVar("mm_replace_snotfolus", -1);
		SetCVar("mm_replace_gargoyle", -1);
		SetCVar("mm_replace_firegargoyle", -1);
		SetCVar("mm_replace_golem", -1);
		SetCVar("mm_replace_golemghost", -1);
		SetCVar("mm_replace_nitrogolem", -1);
		SetCVar("mm_replace_nitrogolemghost", -1);
		SetCVar("mm_replace_discipleofdsparil", -1);
		SetCVar("mm_replace_undeadwarrior", -1);
		SetCVar("mm_replace_undeadwarriorghost", -1);
		SetCVar("mm_replace_sabreclaw", -1);
		SetCVar("mm_replace_ophidian", -1);
		SetCVar("mm_replace_weredragon", -1);
		SetCVar("mm_replace_ironlich", -1);
		SetCVar("mm_replace_maulotaur", -1);
		SetCVar("mm_replace_dsparil", -1);
		SetCVar("mm_replace_chicken", -1);
		SetCVar("mm_replace_ettin", -1);
		SetCVar("mm_replace_afrit", -1);
		SetCVar("mm_replace_darkbishop", -1);
		SetCVar("mm_replace_centaur", -1);
		SetCVar("mm_replace_slaughtaur", -1);
		SetCVar("mm_replace_greenchaosserpent", -1);
		SetCVar("mm_replace_stalker", -1);
		SetCVar("mm_replace_stalkerboss", -1);
		SetCVar("mm_replace_wendigo", -1);
		SetCVar("mm_replace_reiver", -1);
		SetCVar("mm_replace_reiverburied", -1);
		SetCVar("mm_replace_brownchaosserpent", -1);
		SetCVar("mm_replace_traductus", -1);
		SetCVar("mm_replace_zedek", -1);
		SetCVar("mm_replace_menelkir", -1);
		SetCVar("mm_replace_heresiarch", -1);
		SetCVar("mm_replace_korax", -1);
		SetCVar("mm_replace_pig", -1);

		// Spawn Options
		SetCVar("mm_doom", true);
		SetCVar("mm_chex", true);
		SetCVar("mm_heretic", true);
		SetCVar("mm_hexen1", true);
		SetCVar("mm_wolf3d", true);
		SetCVar("mm_duke3d", true);
		SetCVar("mm_marathon", true);
		SetCVar("mm_quake1", true);
		SetCVar("mm_rott", true);
		SetCVar("mm_bstone", true);
		SetCVar("mm_blood", true);
		SetCVar("mm_strife", true);
		SetCVar("mm_erad", true);
		SetCVar("mm_c7", true);
		SetCVar("mm_rmr", true);
		SetCVar("mm_darkf", true);
		SetCVar("mm_ipog", true);
		SetCVar("mm_disrup", true);
		SetCVar("mm_witch", true);
		SetCVar("mm_halflife", true);
		SetCVar("mm_sw", true);
		SetCVar("mm_cm", true);
		SetCVar("mm_ps", true);
		SetCVar("mm_rr", true);
		SetCVar("mm_quake2", true);
		SetCVar("mm_hexen2", true);
		SetCVar("mm_goldeneye", true);
		SetCVar("mm_catacomb", true);
		SetCVar("mm_painkiller", true);
		SetCVar("mm_unreal", true);
		SetCVar("mm_rtcw", true);
		SetCVar("mm_quake3", true);
		SetCVar("mm_descent", true);
		SetCVar("mm_deusex", true);
		break;

		// Secret presets
		case 100: // cubebert's Settings

		// General Options
		SetCVar("mm_invisiblemode", 0);
		SetCVar("mm_ghostmode", 0);
		SetCVar("mm_flightmode", 0);
		SetCVar("mm_infightingmode", 0);
		SetCVar("mm_performancemode", false);
		SetCVar("mm_rarespawns", false); // Not on the menu officially, but it fits here

		// Monster Spawning Options
		SetCVar("mm_spawnmode", 2);
		SetCVar("mm_randomcycle", 1);
		SetCVar("mm_dropmode", 1);
		SetCVar("mm_multiply", 1);
		SetCVar("mm_generate", 0);
		SetCVar("mm_reducemonsters", 99);

		// Monster Override Options
		SetCVar("mm_skilloverride", 1);
		SetCVar("mm_healthoverride", 100);
		SetCVar("mm_speedoverride", 100);

		// Monster Specific Options
		SetCVar("mm_specpermdeath", true);
		SetCVar("mm_wolffastdeath", false);
		SetCVar("mm_fakehitlerfire", true);
		SetCVar("mm_protectorattacks", false);
		SetCVar("mm_fullradiusdmg", true);
		SetCVar("mm_quakezombiedeaths", true);
		SetCVar("mm_redneckcusspack", 0);
		SetCVar("mm_goldeneyecorpsehitboxes", false);
		SetCVar("mm_goldeneyepersistentcorpses", true);

		// Enemy Modes
		SetCVar("mm_doommode", 1);
		SetCVar("mm_wolfmode", 4);
		SetCVar("mm_dukemode", 1);
		SetCVar("mm_rottmode", 0);
		SetCVar("mm_halflifemode", 1);

		// Enemy Spawns
		SetCVar("mm_doomspawns", 0);
		SetCVar("mm_doom64spawns", 0);

		// Monster Replacements
		SetCVar("mm_replace_zombieman", -1);
		SetCVar("mm_replace_shotgunguy", -1);
		SetCVar("mm_replace_imp", -1);
		SetCVar("mm_replace_chaingunguy", -1);
		SetCVar("mm_replace_supershotgunguy", -1);
		SetCVar("mm_replace_demon", -1);
		SetCVar("mm_replace_darkimp", -1);
		SetCVar("mm_replace_spectre", -1);
		SetCVar("mm_replace_blooddemon", -1);
		SetCVar("mm_replace_lostsoul", -1);
		SetCVar("mm_replace_cacodemon", -1);
		SetCVar("mm_replace_revenant", -1);
		SetCVar("mm_replace_cacolantern", -1);
		SetCVar("mm_replace_painelemental", -1);
		SetCVar("mm_replace_hellknight", -1);
		SetCVar("mm_replace_arachnotron", -1);
		SetCVar("mm_replace_fatso", -1);
		SetCVar("mm_replace_abaddon", -1);
		SetCVar("mm_replace_archvile", -1);
		SetCVar("mm_replace_baronofhell", -1);
		SetCVar("mm_replace_hectebus", -1);
		SetCVar("mm_replace_belphegor", -1);
		SetCVar("mm_replace_spidermastermind", -1);
		SetCVar("mm_replace_cyberdemon", -1);
		SetCVar("mm_replace_wolfensteinss", -1);
		SetCVar("mm_replace_flemoiduscommonus", -1);
		SetCVar("mm_replace_flemoidusbipedicus", -1);
		SetCVar("mm_replace_armoredflemoidusbipedicus", -1);
		SetCVar("mm_replace_flemoidusstridicus", -1);
		SetCVar("mm_replace_larva", -1);
		SetCVar("mm_replace_flemmine", -1);
		SetCVar("mm_replace_flemoiduscycloptiscommonus", -1);
		SetCVar("mm_replace_supercycloptis", -1);
		SetCVar("mm_replace_quadrumpus", -1);
		SetCVar("mm_replace_flemoidusmaximus", -1);
		SetCVar("mm_replace_flembrane", -1);
		SetCVar("mm_replace_flembomination", -1);
		SetCVar("mm_replace_snotfolus", -1);
		SetCVar("mm_replace_gargoyle", -1);
		SetCVar("mm_replace_firegargoyle", -1);
		SetCVar("mm_replace_golem", -1);
		SetCVar("mm_replace_golemghost", -1);
		SetCVar("mm_replace_nitrogolem", -1);
		SetCVar("mm_replace_nitrogolemghost", -1);
		SetCVar("mm_replace_discipleofdsparil", -1);
		SetCVar("mm_replace_undeadwarrior", -1);
		SetCVar("mm_replace_undeadwarriorghost", -1);
		SetCVar("mm_replace_sabreclaw", -1);
		SetCVar("mm_replace_ophidian", -1);
		SetCVar("mm_replace_weredragon", -1);
		SetCVar("mm_replace_ironlich", -1);
		SetCVar("mm_replace_maulotaur", -1);
		SetCVar("mm_replace_dsparil", -1);
		SetCVar("mm_replace_chicken", -1);
		SetCVar("mm_replace_ettin", -1);
		SetCVar("mm_replace_afrit", -1);
		SetCVar("mm_replace_darkbishop", -1);
		SetCVar("mm_replace_centaur", -1);
		SetCVar("mm_replace_slaughtaur", -1);
		SetCVar("mm_replace_greenchaosserpent", -1);
		SetCVar("mm_replace_stalker", -1);
		SetCVar("mm_replace_stalkerboss", -1);
		SetCVar("mm_replace_wendigo", -1);
		SetCVar("mm_replace_reiver", -1);
		SetCVar("mm_replace_reiverburied", -1);
		SetCVar("mm_replace_brownchaosserpent", -1);
		SetCVar("mm_replace_traductus", -1);
		SetCVar("mm_replace_zedek", -1);
		SetCVar("mm_replace_menelkir", -1);
		SetCVar("mm_replace_heresiarch", -1);
		SetCVar("mm_replace_korax", -1);
		SetCVar("mm_replace_pig", -1);

		// Spawn Options
		SetCVar("mm_doom", true);
		SetCVar("mm_chex", false);
		SetCVar("mm_heretic", false);
		SetCVar("mm_hexen1", false);
		SetCVar("mm_wolf3d", false);
		SetCVar("mm_duke3d", false);
		SetCVar("mm_marathon", false);
		SetCVar("mm_quake1", false);
		SetCVar("mm_rott", false);
		SetCVar("mm_bstone", false);
		SetCVar("mm_blood", false);
		SetCVar("mm_strife", false);
		SetCVar("mm_erad", false);
		SetCVar("mm_c7", false);
		SetCVar("mm_rmr", false);
		SetCVar("mm_darkf", false);
		SetCVar("mm_ipog", false);
		SetCVar("mm_disrup", false);
		SetCVar("mm_witch", false);
		SetCVar("mm_halflife", false);
		SetCVar("mm_sw", false);
		SetCVar("mm_cm", false);
		SetCVar("mm_ps", false);
		SetCVar("mm_rr", false);
		SetCVar("mm_quake2", false);
		SetCVar("mm_hexen2", false);
		SetCVar("mm_goldeneye", false);
		SetCVar("mm_catacomb", false);
		SetCVar("mm_painkiller", false);
		SetCVar("mm_unreal", false);
		SetCVar("mm_rtcw", false);
		SetCVar("mm_quake3", false);
		SetCVar("mm_descent", false);
		SetCVar("mm_deusex", false);
		break;

		case 101: // tehvappy50's Settings

		// General Options
		SetCVar("mm_invisiblemode", 0);
		SetCVar("mm_ghostmode", 0);
		SetCVar("mm_flightmode", 0);
		SetCVar("mm_infightingmode", 0);
		SetCVar("mm_performancemode", false);
		SetCVar("mm_rarespawns", true);

		// Monster Spawning Options
		SetCVar("mm_spawnmode", 3);
		SetCVar("mm_randomcycle", 1);
		SetCVar("mm_dropmode", 0);
		SetCVar("mm_multiply", 1);
		SetCVar("mm_generate", 15);
		SetCVar("mm_reducemonsters", 99);

		// Monster Override Options
		SetCVar("mm_skilloverride", 0);
		SetCVar("mm_healthoverride", 100);
		SetCVar("mm_speedoverride", 100);

		// Monster Specific Options
		SetCVar("mm_specpermdeath", true);
		SetCVar("mm_wolffastdeath", false);
		SetCVar("mm_fakehitlerfire", true);
		SetCVar("mm_protectorattacks", true);
		SetCVar("mm_fullradiusdmg", true);
		SetCVar("mm_quakezombiedeaths", false);
		SetCVar("mm_redneckcusspack", 0);
		SetCVar("mm_goldeneyecorpsehitboxes", true);
		SetCVar("mm_goldeneyepersistentcorpses", false);

		// Enemy Modes
		SetCVar("mm_doommode", 3);
		SetCVar("mm_wolfmode", 5);
		SetCVar("mm_dukemode", 3);
		SetCVar("mm_rottmode", 2);
		SetCVar("mm_halflifemode", 3);

		// Enemy Spawns
		SetCVar("mm_doomspawns", 1);
		SetCVar("mm_doom64spawns", 1);

		// Monster Replacements
		SetCVar("mm_replace_zombieman", -1);
		SetCVar("mm_replace_shotgunguy", -1);
		SetCVar("mm_replace_imp", -1);
		SetCVar("mm_replace_chaingunguy", -1);
		SetCVar("mm_replace_supershotgunguy", -1);
		SetCVar("mm_replace_demon", -1);
		SetCVar("mm_replace_darkimp", -1);
		SetCVar("mm_replace_spectre", -1);
		SetCVar("mm_replace_blooddemon", -1);
		SetCVar("mm_replace_lostsoul", -1);
		SetCVar("mm_replace_cacodemon", -1);
		SetCVar("mm_replace_revenant", -1);
		SetCVar("mm_replace_cacolantern", -1);
		SetCVar("mm_replace_painelemental", -1);
		SetCVar("mm_replace_hellknight", -1);
		SetCVar("mm_replace_arachnotron", -1);
		SetCVar("mm_replace_fatso", -1);
		SetCVar("mm_replace_abaddon", -1);
		SetCVar("mm_replace_archvile", -1);
		SetCVar("mm_replace_baronofhell", -1);
		SetCVar("mm_replace_hectebus", -1);
		SetCVar("mm_replace_belphegor", -1);
		SetCVar("mm_replace_spidermastermind", -1);
		SetCVar("mm_replace_cyberdemon", -1);
		SetCVar("mm_replace_wolfensteinss", -1);
		SetCVar("mm_replace_flemoiduscommonus", -1);
		SetCVar("mm_replace_flemoidusbipedicus", -1);
		SetCVar("mm_replace_armoredflemoidusbipedicus", -1);
		SetCVar("mm_replace_flemoidusstridicus", -1);
		SetCVar("mm_replace_larva", -1);
		SetCVar("mm_replace_flemmine", -1);
		SetCVar("mm_replace_flemoiduscycloptiscommonus", -1);
		SetCVar("mm_replace_supercycloptis", -1);
		SetCVar("mm_replace_quadrumpus", -1);
		SetCVar("mm_replace_flemoidusmaximus", -1);
		SetCVar("mm_replace_flembrane", -1);
		SetCVar("mm_replace_flembomination", -1);
		SetCVar("mm_replace_snotfolus", -1);
		SetCVar("mm_replace_gargoyle", -1);
		SetCVar("mm_replace_firegargoyle", -1);
		SetCVar("mm_replace_golem", -1);
		SetCVar("mm_replace_golemghost", -1);
		SetCVar("mm_replace_nitrogolem", -1);
		SetCVar("mm_replace_nitrogolemghost", -1);
		SetCVar("mm_replace_discipleofdsparil", -1);
		SetCVar("mm_replace_undeadwarrior", -1);
		SetCVar("mm_replace_undeadwarriorghost", -1);
		SetCVar("mm_replace_sabreclaw", -1);
		SetCVar("mm_replace_ophidian", -1);
		SetCVar("mm_replace_weredragon", -1);
		SetCVar("mm_replace_ironlich", -1);
		SetCVar("mm_replace_maulotaur", -1);
		SetCVar("mm_replace_dsparil", -1);
		SetCVar("mm_replace_chicken", -1);
		SetCVar("mm_replace_ettin", -1);
		SetCVar("mm_replace_afrit", -1);
		SetCVar("mm_replace_darkbishop", -1);
		SetCVar("mm_replace_centaur", -1);
		SetCVar("mm_replace_slaughtaur", -1);
		SetCVar("mm_replace_greenchaosserpent", -1);
		SetCVar("mm_replace_stalker", -1);
		SetCVar("mm_replace_stalkerboss", -1);
		SetCVar("mm_replace_wendigo", -1);
		SetCVar("mm_replace_reiver", -1);
		SetCVar("mm_replace_reiverburied", -1);
		SetCVar("mm_replace_brownchaosserpent", -1);
		SetCVar("mm_replace_traductus", -1);
		SetCVar("mm_replace_zedek", -1);
		SetCVar("mm_replace_menelkir", -1);
		SetCVar("mm_replace_heresiarch", -1);
		SetCVar("mm_replace_korax", -1);
		SetCVar("mm_replace_pig", -1);

		// Spawn Options
		SetCVar("mm_doom", true);
		SetCVar("mm_chex", true);
		SetCVar("mm_heretic", true);
		SetCVar("mm_hexen1", true);
		SetCVar("mm_wolf3d", true);
		SetCVar("mm_duke3d", true);
		SetCVar("mm_marathon", true);
		SetCVar("mm_quake1", true);
		SetCVar("mm_rott", true);
		SetCVar("mm_bstone", true);
		SetCVar("mm_blood", true);
		SetCVar("mm_strife", true);
		SetCVar("mm_erad", true);
		SetCVar("mm_c7", true);
		SetCVar("mm_rmr", true);
		SetCVar("mm_darkf", true);
		SetCVar("mm_ipog", true);
		SetCVar("mm_disrup", true);
		SetCVar("mm_witch", true);
		SetCVar("mm_halflife", true);
		SetCVar("mm_sw", true);
		SetCVar("mm_cm", true);
		SetCVar("mm_ps", true);
		SetCVar("mm_rr", true);
		SetCVar("mm_quake2", true);
		SetCVar("mm_hexen2", true);
		SetCVar("mm_goldeneye", isZDoom() ? true : false);
		SetCVar("mm_catacomb", true);
		SetCVar("mm_painkiller", false);
		SetCVar("mm_unreal", false);
		SetCVar("mm_rtcw", false);
		SetCVar("mm_quake3", false);
		SetCVar("mm_descent", false);
		SetCVar("mm_deusex", false);
		break;
	}
}