#library "SMMACS"
#include "zcommon.acs"
#include "commonFuncs.acs"

#define MAX_GAME_TYPES 28

int SMMCVARINFO = 
"Stuff";

int SMMCHANGES =
"Stuff";

str SAMSARA_CHANGELIST = "1.0";

str gameTypesStr[MAX_GAME_TYPES] =
		{	"mm_doom", "mm_chex", "mm_heretic", "mm_wolf3d", "mm_hexen1", "mm_duke3d", "mm_marathon", "mm_quake1", 
			"mm_rott", "mm_bstone", "mm_blood", "mm_strife", "mm_erad", "mm_c7", "mm_rmr", "mm_darkf", "mm_ipog", 
			"mm_disrup", "mm_witch", "mm_halflife", "mm_sw", "mm_cm", "mm_ps", "mm_rr", "mm_quake2", "mm_hexen2", 
			"mm_goldeneye", "mm_catacomb"
};

str gameSetsStr[MAX_GAME_TYPES] = {
	"SetDoom", "SetChex", "SetHeretic", "SetWolf3d", "SetHexen1", "SetDuke3D", "SetMarathon", "SetQuake1", "SetRoTT", "SetBStone",
	"SetBlood", "SetStrife", "SetErad", "SetC7", "SetRmr", "SetDarkF", "SetIPOG", "SetDisrup", "SetWitch", "SetHL", "SetSW", "SetCM", 
	"SetExhumed", "SetRR", "SetQuake2", "SetHexen2", "SetGoldeneye", "SetCatacomb"
};

str gameClassesSTR[MAX_GAME_TYPES] = {
	"DoomguyPlayer2", "ChexWarrior2", "CorvusPlayer2", "WolfenPlayer2", "HexenPlayer2", "DukePlayer2", "MarathonPlayer2", "QuakePlayer2", "IPFreeley2", "BlakeStone2",
	"Caleb2", "StrifeGuyPlayer2", "Eleena2", "Corridor7Player2", "RebelMoonCommando2", "KatarnPlayer2", "POGreedPlayer2", "DisruptorPlayer2", "GrondovalPlayer2", 
	"HalfLifePlayer2", "LoWangPlayer2", "CMPlayer2", "PSPlayer2", "Leonard2", "Bitterman2", "Demoness2", "JamesBond2", "PettonEverhail2"
};

str doomModes[3] = { "SetDoom", "SetDoom64", "SetDoomRandom" };
str wolfModes[3] = { "SetWolf3D", "SetSpear", "SetTotenkopf" };
str dukeModes[2] = { "SetDuke3D", "SetDukeLAB" };
str hlModes[2] =   { "SetHL", "SetHLOP" };

int activeSets = 0;
int pickFromSets[MAX_GAME_TYPES];
int amountOfGameTypes[MAX_GAME_TYPES];
int maxSetsEnabled = 0;
int monsterProcessing = 0;
int pickClear = 0;
int maxAltSets = 4;

#define MAX_MAPS				500

global int 2:alreadyshowedbs;
//global int 4:lastchosen;

str skill[5] = { "Kindergarten", "Easy", "Normal", "MajorDamage", "TotalCarnage" };

Script "ReMixerInit" OPEN //667
{
	//pickClear = 0;
	if (!GetCVar("mm_init"))
	{
		SetCVar("mm_doom", true);
		SetCVar("mm_heretic", true);
		SetCVar("mm_hexen1", true);
		SetCVar("mm_chex", true);
		SetCVar("mm_wolf3d", true);
		SetCVar("mm_duke3d", true);
		SetCVar("mm_marathon", true);
		SetCVar("mm_bstone", true);
		SetCVar("mm_rott", true);
		SetCVar("mm_rr", true);
		SetCVar("mm_erad", true);
		SetCVar("mm_strife", true);
		SetCVar("mm_darkf", true);
		SetCVar("mm_cm", true);
		SetCVar("mm_c7", true);	
		SetCVar("mm_sw", true);
		SetCVar("mm_blood", true);
		SetCVar("mm_rmr", true);
		SetCVar("mm_ps", true);	
		SetCVar("mm_ipog", true);	
		SetCVar("mm_witch", true);				
		SetCVar("mm_disrup", true);		
		SetCVar("mm_quake1", true);		
		SetCVar("mm_halflife", true);	
		SetCVar("mm_quake2", true);	
		SetCVar("mm_hexen2", true);	
		SetCVar("mm_goldeneye", true);
		SetCVar("mm_catacomb", true);
		SetCVar("mm_wolfmode", 2);
		SetCVar("mm_randomcycle", 0);
		SetCVar("mm_fakehitlerfire", true);
		SetCVar("mm_wolffastdeath", false);
		SetCVar("mm_spawnmode", 0);
		SetCVar("mm_skilloverride", 5);	
		SetCVar("mm_multiply", 1);
		SetCVar("mm_newchex", true);
		SetCVar("mm_pinataparty", false);
		SetCVar("mm_rarespawns", true);
		SetCVar("mm_fullradiusdmg", false);
		SetCVar("mm_invisiblemode", false);
		SetCVar("mm_nobats", true);
		SetCVar("mm_specpermdeath", true);
		SetCVar("mm_maratele", true);
		
		SetCVar("mm_init", true);
	}
	
	if (alreadyshowedbs == 0)
	{
		HudMessage(s:"ReMixer ",s:SAMSARA_CHANGELIST; HUDMSG_FADEOUT|HUDMSG_LOG, 93003, CR_GOLD, 1.5, 0.28, 2.0, 0.5);
		if (GameType() == GAME_TITLE_MAP) { }
		if (Singleplayer() == 1)
		{
			if(GetCvar("sams_cvarinfo") == 0)
			{
				Delay(2);
				Hudmessage(s:SMMCVARINFO; HUDMSG_PLAIN|HUDMSG_LOG, 93000, CR_GRAY, 1.5, 0.25, 2.5);
				Hudmessage(s:"Also includes cvar info for SMM."; HUDMSG_FADEOUT, 93000, CR_RED, 1.5, 0.25, 2.0, 0.5);
			}
		}
		else { 	Delay(2); Log(s:SMMCVARINFO); }
		
		alreadyshowedbs = 1;
	}
	
	SpawnForced("SamsaraMixerCompendiumToken",0,0,0,0,0);
}

Script "ReMixerSpawnScript" (int spawncode, int override) //668
{
	int map;
	int setselect;
	int multitoken;
	int gameTypeMap;
	int numGameTypes = 0;
	int altSetSelect;
	
	map = GetLevelInfo(LEVELINFO_LEVELNUM);
	
	Switch(spawncode)
	{
		case 1:
			if(GetCvar("sams_runninginzdoom"))
				SetActorFlag(0,"INTERPOLATEANGLES",1);
			//if(SpawnForced("StrongHoldLoaded",0,0,0,0))
				//ACS_NamedExecuteWithResult("Samsara_MonsterSpawn",0,0,0,0); //uncomment this for stronghold support, will deal with later
			if(GetCVar("mm_skilloverride") < 5)
			{
				multitoken = GetCVar("mm_skilloverride");
				GiveInventory("DifficultyToken", multitoken);
			}
			else
			{
				multitoken = GameSkill ();
				GiveInventory("DifficultyToken", multitoken);
			}
			
			if(GetCVar("mm_invisiblemode") == 1)
			{
				GiveInventory("InvisibleToken",1);
				SetActorProperty(0,APROP_Alpha,0);
			}
			
			if(GetCVAR("mm_dropmode") == 1)
			{
				GiveInventory("WeaponDropToken", 1);
			}	
			
			if(GetCVar("mm_multiply") > 1 && !CheckInventory("MultiplyOverflowToken"))
			{
				int activator = ActivatorTid();
				int newtid = UniqueTid();
				for(int g = 1; g < GetCVar("mm_multiply"); g++)
				{
					SpawnForced(GetActorClass(activator),GetActorX(activator),GetActorY(activator),GetActorZ(activator),newtid,0);
					SetActorAngle(newtid,GetActorAngle(activator));
					GiveActorInventory(newtid, "MultiplyOverflowToken", 1);
					GiveActorInventory(newtid, "ThruSpeciesToken", 1);
					SetActorProperty(newtid,APROP_Species,GetActorClass(activator));
					SetActorProperty(activator,APROP_Species,GetActorClass(activator));
					GiveActorInventory(activator, "ThruSpeciesToken", 1);
					ThrustThing(random(0,256), 2, 0, newtid);
					Thing_ChangeTid(newtid, activator);
				}
				break;
			}
			else { break; }

			break;

		case 2:
			until(pickClear && (SinglePlayer() || timer() > 5) && PlayerCount() > 0)
				Delay(1);
												
			if(maxSetsEnabled == 0)
			{
				SetActorState(0,"SetNull",true);
				terminate;
			}
				
			setselect = random(1, maxSetsEnabled) - 1;
						
			switch(pickFromSets[setselect])
			{
				//All other sets
				default:
					SetActorState(0,gameSetsStr[pickFromSets[setselect]],true);
					break;
				case 0: // Doom
					switch(GetCvar("mm_doommode"))
					{
						case 0:
							while(amountOfGameTypes[pickFromSets[setselect]] != 0)
							{
								altSetSelect = random(0,maxAltSets);
								if(amountOfGameTypes[pickFromSets[setselect]] & 1<<altSetSelect)
									break;
							}
							SetActorState(0,doomModes[altSetSelect],true);
							break;					
						case 1:
							while(amountOfGameTypes[pickFromSets[setselect]] != 0)
							{
								altSetSelect = random(0,maxAltSets);
								if(amountOfGameTypes[pickFromSets[setselect]] & 1<<altSetSelect)
									break;
							}
							SetActorState(0,doomModes[altSetSelect + (2 * random(0,altSetSelect==0))],true);
							break;
						case 2:
							SetActorState(0,gameSetsStr[pickFromSets[setselect]],true);
							break;
						case 3:
							SetActorState(0,"SetDoom64",true);
							break;
						case 4:
							SetActorState(0,"SetDoomRandom",true);
							break;
						case 5:
							SetActorState(0,doomModes[random(0,2)],true);
							break;
					}
					break;
				case 3: // Wolf3d
					switch(GetCvar("mm_wolfmode"))
					{
						case 0: //doing this one the crude way
							while(amountOfGameTypes[pickFromSets[setselect]] != 0)
							{
								altSetSelect = random(0,maxAltSets);
								if(amountOfGameTypes[pickFromSets[setselect]] & 1<<altSetSelect)
									break;
							}
							SetActorState(0,wolfModes[altSetSelect],true);
							break;				
						case 1:
							SetActorState(0,"SetWolf3D",true);
							break;
						case 2:
							SetActorState(0,"SetSpear",true);
							break;
						case 3:
							SetActorState(0,"SetTotenkopf",true);	
							break;
						case 4: 
							SetActorState(0,wolfModes[random(0,1)],true);
							break;			
						case 5:
							SetActorState(0,wolfModes[random(0,2)],true);
							break;							
					}
					break;
				case 5:
					switch(GetCvar("mm_dukemode"))
					{
						case 0:
							while(amountOfGameTypes[pickFromSets[setselect]] != 0)
							{
								altSetSelect = random(0,maxAltSets);
								if(amountOfGameTypes[pickFromSets[setselect]] & 1<<altSetSelect)
									break;
							}
							SetActorState(0,dukeModes[altSetSelect],true);
							break;
						case 1:
							SetActorState(0,gameSetsStr[pickFromSets[setselect]],true);
							break;
						case 2:
							SetActorState(0,"SetDukeLAB",true);
							break;
						case 3:
							SetActorState(0,dukeModes[random(0,1)],true);
							break;						
					}
					break;
				case 19:
					switch(GetCvar("mm_halflifemode"))
					{
						case 0:
							while(amountOfGameTypes[pickFromSets[setselect]] != 0)
							{
								altSetSelect = random(0,maxAltSets);
								if(amountOfGameTypes[pickFromSets[setselect]] & 1<<altSetSelect)
									break;
							}
							SetActorState(0,hlModes[altSetSelect],true);
							break;
						case 1:
							SetActorState(0,gameSetsStr[pickFromSets[setselect]],true);
							break;
						case 2:
							SetActorState(0,"SetHLOP",true);
							break;
					}
					break;
			}
			break;
			
		case 3:
		if(GetCVar("mm_multiply") > 1)
		{
			multitoken = GetCvar("mm_multiply");
			GiveInventory("MultiplyToken", multitoken);
			break;
		}
		else { break; }
		case 4:
			if(GetCVAR("mm_dropmode") == 1)
			{
				GiveInventory("WeaponDropToken", 1);
			}
		else { break; }	
	}
}

Script "ReMixerInvasion" OPEN //670
{
	if(GetPlayerAccountName(0) == 0)
		terminate;
		
	int spawnmode;
	int oldmode;
	int drawn;
	while(true)
	{
		if(GetInvasionState() == 1 || GetInvasionState() == 5)
		{
			spawnmode = GetCvar("mm_spawnmode");
			if(oldmode != spawnmode)
			{
				ACS_NamedExecuteWithResult("ReMixer_PickSets",0,0,0,0);
			}		
		}
		Delay(1);
		oldmode = spawnmode;
	}
}

Script "MarathonSkillCheck" (void) //671
{
	int checkskill;
	checkskill = ACS_NamedExecuteWithResult ("ReMixerCVarCheck", 3);

	SetActorState(0,skill[checkskill],true);
}

Script "MarathonTeleport" (void)
{
	if(GetCVar("mm_maratele") == 1)
	{
		GiveInventory("TeleportIn", 1);
	}
	else { terminate; }
}

Script "ReMixerCVarCheck" (int pick) //680
{
	int response;

	Switch (pick)
	{
		case 1:
        response = GetCVar("mm_fakehitlerfire");
        break;
		
		case 2:
		response = GetCVar("mm_wolffastdeath");
		break;
		
		case 3:
		if(GetCVar("mm_skilloverride") < 5)
		{
			response = GetCVar("mm_skilloverride");
		}
		else
		{
			response = GameSkill ();
		}
		break;
		
		case 4:
		response = GetCVar("mm_dropdefault");
		break;
		
		case 5:
		response = GetCvar("mm_pinataparty");
		break;
		
		case 6:
		response = GetCvar("mm_newchex");
		break;
		
		case 7:
		response = GetCvar("mm_rarespawns");
		break;
		
		case 8:
		response = GetCvar("mm_invisiblemode");
		break;
		
		case 9:
		response = GetCvar("mm_fullradiusdmg");
		break;
		
		case 10:
		response = GetCvar("mm_nobats");
		break;
		
		case 11:
		response = GetCvar("mm_specpermdeath");
		break;
		
		case 12:
		if(GetCvar("mm_spawnmode") < 3)
		{
		response = 1;
		}
		break;
	}
	SetResultValue(response);
}

Script "ReMixer_PickSets" (void)
{	
	if(monsterProcessing == 1)
		terminate;
			
	int clients = PlayerCount();
	int bitindex, a, b, p;

	activeSets = 0;
	monsterProcessing = 1;
	pickClear = 0;
	maxSetsEnabled = 0;
	for(a = 0; a < MAX_GAME_TYPES; a++)
	{
		pickFromSets[a] = -1;
		amountOfGameTypes[a] = 0;
	}
	
	switch(GetCvar("mm_spawnmode"))
	{
		case 0:
			for(p = 0; p < clients; p++)
			{	
				if(PlayerInGame(p) == true)
				{
					for(b = 0; b < MAX_GAME_TYPES; b++)
					{
						bitindex = pow(2,b);
						if(PlayerClass(p) == b)
						{
							if(!(activesets & bitindex))
							{
								activesets += bitindex;
								pickFromSets[maxSetsEnabled] = b;
								maxSetsEnabled++;
							}
							switch(b)
							{
								default: break;
								case 0: 
									if(!(amountOfGameTypes[b] & 1<<GetUserCvar(p,"sams_cl_doom64")))
										amountOfGameTypes[b] += 1<<GetUserCvar(p,"sams_cl_doom64");
									break;
								case 3: 
									if(!(amountOfGameTypes[b] & 1<<GetUserCvar(p,"sams_cl_wolfmode")))
										amountOfGameTypes[b] += 1<<GetUserCvar(p,"sams_cl_wolfmode");
									break;
								case 5: 
									if(!(amountOfGameTypes[b] & 1<<GetUserCvar(p,"sams_cl_dkclab")))
										amountOfGameTypes[b] += 1<<GetUserCvar(p,"sams_cl_dkclab");
									break;
								case 19: 
									if(!(amountOfGameTypes[b] & 1<<GetUserCvar(p,"sams_cl_shephardmode")))
										amountOfGameTypes[b] += 1<<GetUserCvar(p,"sams_cl_shephardmode");
									break;
							}						
						}
					}
				}
				else
				{
					clients++;
				}
			}
			break;
		case 1:
			for(b = 0; b < MAX_GAME_TYPES; b++)
			{
				str gameTypeMap = strparam(s:gameTypesStr[b], d:GetLevelInfo(LEVELINFO_LEVELNUM));;
					
				if(GetCvar(gameTypeMap))
				{
					bitindex = pow(2,b);
					if(!(activesets & bitindex))
					{
						activesets += bitindex;
						pickFromSets[maxSetsEnabled] = b;
						maxSetsEnabled++;
					}
					if(PlayerClass(p) == b && PlayerInGame(p))
					{
						switch(b)
						{
							default: break;
							case 0: 
								if(!(amountOfGameTypes[b] & 1<<GetUserCvar(p,"sams_cl_doom64")))
									amountOfGameTypes[b] += 1<<GetUserCvar(p,"sams_cl_doom64");
								break;
							case 3: 
								if(!(amountOfGameTypes[b] & 1<<GetUserCvar(p,"sams_cl_wolfmode")))
									amountOfGameTypes[b] += 1<<GetUserCvar(p,"sams_cl_wolfmode");
								break;
							case 5: 
								if(!(amountOfGameTypes[b] & 1<<GetUserCvar(p,"sams_cl_dkclab")))
									amountOfGameTypes[b] += 1<<GetUserCvar(p,"sams_cl_dkclab");
								break;
							case 19: 
								if(!(amountOfGameTypes[b] & 1<<GetUserCvar(p,"sams_cl_shephardmode")))
									amountOfGameTypes[b] += 1<<GetUserCvar(p,"sams_cl_shephardmode");
								break;
						}
					}
				}
			}
			break;
		case 2:
			for(b = 0; b < MAX_GAME_TYPES; b++)
			{
				if(GetCvar(gameTypesStr[b]))
				{
					bitindex = pow(2,b);
					if(!(activesets & bitindex))
					{
						activesets += bitindex;
						pickFromSets[maxSetsEnabled] = b;
						maxSetsEnabled++;
					}
					if(PlayerClass(p) == b && PlayerInGame(p))
					{
						switch(b)
						{
							default: break;
							case 0: 
								if(!(amountOfGameTypes[b] & 1<<GetUserCvar(p,"sams_cl_doom64")))
									amountOfGameTypes[b] += 1<<GetUserCvar(p,"sams_cl_doom64");
								break;
							case 3: 
								if(!(amountOfGameTypes[b] & 1<<GetUserCvar(p,"sams_cl_wolfmode")))
									amountOfGameTypes[b] += 1<<GetUserCvar(p,"sams_cl_wolfmode");
								break;
							case 5: 
								if(!(amountOfGameTypes[b] & 1<<GetUserCvar(p,"sams_cl_dkclab")))
									amountOfGameTypes[b] += 1<<GetUserCvar(p,"sams_cl_dkclab");
								break;
							case 19: 
								if(!(amountOfGameTypes[b] & 1<<GetUserCvar(p,"sams_cl_shephardmode")))
									amountOfGameTypes[b] += 1<<GetUserCvar(p,"sams_cl_shephardmode");
								break;
						}
					}
				}
			}
			break;
		case 3:
			int selectloop = 0;	
			int randomvalue = GetCvar("mm_randomcycle");
			int randnum;
			int erroramount = 0;
			int randombit;
			int randomtotal;
			
			While (selectloop < randomvalue)
			{
				randombit = 1;
				randnum = random(0, MAX_GAME_TYPES-1);
				for(b = 0; b < randnum; b++) { randombit *= 2; }
				//PrintBold(s:gameTypesStr[randnum],s:" ",d:randombit,s:" ",d:randomtotal);
				
				if(!GetCVar(gameTypesStr[randnum])||randomtotal & randombit) { if(erroramount > 128){ selectloop = randnum; break; } else{erroramount++;} }
				else 
				{ 
					pickFromSets[maxSetsEnabled] = randnum; 
					maxSetsEnabled++; 
					selectloop++; 
					erroramount = 0; 
					randomtotal += randombit; 
					
					if(PlayerClass(p) == randnum && PlayerInGame(p))
					{
						switch(randnum)
						{
							default: break;
							case 0: 
								if(!(amountOfGameTypes[randnum] & 1<<GetUserCvar(p,"sams_cl_doom64")))
									amountOfGameTypes[randnum] += 1<<GetUserCvar(p,"sams_cl_doom64");
								break;
							case 3: 
								if(!(amountOfGameTypes[randnum] & 1<<GetUserCvar(p,"sams_cl_wolfmode")))
									amountOfGameTypes[randnum] += 1<<GetUserCvar(p,"sams_cl_wolfmode");
								break;
							case 5: 
								if(!(amountOfGameTypes[randnum] & 1<<GetUserCvar(p,"sams_cl_dkclab")))
									amountOfGameTypes[randnum] += 1<<GetUserCvar(p,"sams_cl_dkclab");
								break;
							case 19: 
								if(!(amountOfGameTypes[randnum] & 1<<GetUserCvar(p,"sams_cl_shephardmode")))
									amountOfGameTypes[randnum] += 1<<GetUserCvar(p,"sams_cl_shephardmode");
								break;
						}
					}
				}
			}
			break;
	}
	pickClear = 1;
	monsterProcessing = 0;
}

//Script "ReMixer_PickSets_OPEN" Open { ACS_NamedExecuteWithResult("ReMixer_PickSets",0,0,0,0); }
Script "ReMixer_PickSets_RESPAWN" RESPAWN { ACS_NamedExecuteWithResult("ReMixer_PickSets",0,0,0,0); }
//Script "ReMixer_PickSets_REOPEN" REOPEN { ACS_NamedExecuteWithResult("ReMixer_PickSets",0,0,0,0); }
Script "ReMixer_PickSets_ENTER" ENTER { ACS_NamedExecuteWithResult("ReMixer_PickSets",0,0,0,0);}
Script "ReMixer_PickSets_DISCONNECT" (int player) DISCONNECT { ACS_NamedExecuteWithResult("ReMixer_PickSets",0,0,0,0); }

Script "RemixerInvasionChecker" (void)
{
	if(GetPlayerAccountName(0) == 0) { SetResultValue(0); terminate; }
	SetResultValue(GetInvasionState() != -1);
}

int maxPinataCommonQuality = 9;
int maxPinataUncommonQuality = 18;
int maxPinataRareQuality = 19;
int maxPinataEpicQuality = 11;
int maxPinataLegendaryQuality = 15;

str PinataDoomCommonQuality[9] = { "Ammo1Small", "Ammo2Small", "HealPack0", "ArmorScrap200", "HealPack1", "Ammo1Big", "Ammo2Big", "SamsaraSlotTwoDrop", "SamsaraSlotFourDrop" };
str PinataDoomUncommonQuality[18] = { "Ammo3Small", "Ammo4Small", "HealPack1", "Ammo1Big", "Ammo2Big", "Visor", "BioSuit", "HealPack2", "SuperHealth2", "PartialInvisibility", "SamsaraSlotOneDrop", "SamsaraSlotTwoDrop", "SamsaraSlotFourDrop", "SamsaraSlotThreeDrop", "Ammo1Small", "Ammo2Small", "ArmorPack1", "AmmoBackpack" };
str PinataDoomRareQuality[19] = { "Ammo1Big", "Ammo2Big", "HealthPack2", "SamsaraSlotOneDrop", "SamsaraSlotThreeDrop", "SamsaraSlotFourDrop", "Ammo3Big", "Ammo4Big", "SamsaraSlotFiveDrop", "SamsaraSlotSixDrop", "AmmoBackpack", "SuperHealth2", "ArmorPack2", "Ammo3Small", "Ammo4Small", "Megapack", "Visor", "BioSuit", "PartialInvisibility"};
str PinataDoomEpicQuality[11] = { "AmmoBackpack", "SuperHealth2", "ArmorPack2", "Ammo3Big", "Ammo4Big", "SamsaraSlotFiveDrop", "SamsaraSlotSixDrop", "Megapack", "SamsaraSlotSevenDrop", "Ammo1Big", "Ammo2Big" };
str PinataDoomLegendaryQuality[15] = { "AmmoBackpack", "Megapack", "SamsaraSlotSevenDrop", "Ammo3Big", "Ammo4Big", "RageRune", "SpreadRune", "StrengthRune", "ResistanceRune", "ProsperityRune", "DrainRune", "RegenerationRune", "HasteRune", "ReflectionRune", "HighJumpRune" };

//f me
int PinataDoomCommonQualityInt[9] = { 50, 50, 50, 50, 25, 10, 10, 5, 5 };
int PinataDoomUncommonQualityInt[18] = { 50, 50, 50, 25, 25, 15, 15, 10, 10, 10, 15, 15, 10, 10, 10, 10, 10, 5 };
int PinataDoomRareQualityInt[19] = { 50, 50, 30, 30, 30, 30, 25, 25, 15, 15, 10, 10, 10, 10, 10, 5, 5, 5 };
int PinataDoomEpicQualityInt[11] = { 50, 50, 50, 50, 50, 30, 30, 25, 10, 5, 5 };
int PinataDoomLegendaryQualityInt[15] = { 100, 50, 50, 30, 30, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 };

Script "Samsara_PinataHandler" (int health, int radius, int height)
{
	if(!GetCvar("mm_pinataparty"))
		terminate;
		
	int spawneditems, randomchance, randomitem, newtid;
	int maxitems = ((height*4)*(radius*radius))/4096;
	if(health < 200)
	{
		newtid = UniqueTid();
		While(spawneditems < maxitems)
		{
			randomchance = random(0,100);
			randomitem = random(0,maxPinataCommonQuality-1);
			if(randomchance < PinataDoomCommonQualityInt[randomitem])
			{
				SpawnForced(PinataDoomCommonQuality[randomitem],GetActorX(0),GetActorY(0),GetActorZ(0),newtid,0);
				ThrustThing(random(0,256),2,0,newtid);
				ThrustThingZ(newtid,random(17,35),0,1);
				Thing_ChangeTid(newtid,0);
				spawneditems++;
			}
		}
	}
	else if(health < 1000)
	{
		newtid = UniqueTid();
		While(spawneditems < maxitems)
		{
			randomchance = random(0,100);
			randomitem = random(0,maxPinataUncommonQuality-1);
			if(randomchance < PinataDoomUncommonQualityInt[randomitem])
			{
				SpawnForced(PinataDoomUncommonQuality[randomitem],GetActorX(0),GetActorY(0),GetActorZ(0),newtid,0);
				ThrustThing(random(0,256),2,0,newtid);
				ThrustThingZ(newtid,random(17,35),0,1);
				Thing_ChangeTid(newtid,0);
				spawneditems++;
			}
		}
	}
	else if(health < 2500)
	{
		newtid = UniqueTid();
		While(spawneditems < maxitems)
		{
			randomchance = random(0,100);
			randomitem = random(0,maxPinataRareQuality-1);
			if(randomchance < PinataDoomRareQualityInt[randomitem])
			{
				SpawnForced(PinataDoomRareQuality[randomitem],GetActorX(0),GetActorY(0),GetActorZ(0),newtid,0);
				ThrustThing(random(0,256),2,0,newtid);
				ThrustThingZ(newtid,random(17,35),0,1);
				Thing_ChangeTid(newtid,0);
				spawneditems++;
			}
		}
	}
	else if(health < 5000)
	{
		newtid = UniqueTid();
		While(spawneditems < maxitems)
		{
			randomchance = random(0,100);
			randomitem = random(0,maxPinataEpicQuality-1);
			if(randomchance < PinataDoomEpicQualityInt[randomitem])
			{
				SpawnForced(PinataDoomEpicQuality[randomitem],GetActorX(0),GetActorY(0),GetActorZ(0),newtid,0);
				ThrustThing(random(0,256),2,0,newtid);
				ThrustThingZ(newtid,random(17,35),0,1);
				Thing_ChangeTid(newtid,0);
				spawneditems++;
			}
		}
	}
	else
	{
		newtid = UniqueTid();
		While(spawneditems < maxitems)
		{
			randomchance = random(0,100);
			randomitem = random(0,maxPinataLegendaryQuality-1);
			if(randomchance < PinataDoomLegendaryQualityInt[randomitem])
			{
				if(SpawnForced(PinataDoomLegendaryQuality[randomitem],GetActorX(0),GetActorY(0),GetActorZ(0),newtid,0))
				{
					GiveActorInventory(newtid,"GravityToken",1);
					ThrustThing(random(0,256),2,0,newtid);
					ThrustThingZ(newtid,random(17,35),0,1);
					Thing_ChangeTid(newtid,0);
					spawneditems++;
				}
			}
		}
	}
}

Script "HeresiarchScriptTokens" (void) { SetResultValue(CheckInventory("HeresiarchScriptTokens")); }