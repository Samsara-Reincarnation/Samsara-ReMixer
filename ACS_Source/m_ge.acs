str GuardTypes[21] = { "ArmorGuard", "BlueCamGuard", "CamGuard", "CommGuard", "GrayGuard", "GreatGuard", "GreatGuard2", "MoonFemale", "MoonGuard", "NavyGuard", "OliveGuard", "Ourumov", "RusGuard", "TrevGuard", "SnowGuard", "Oddjob", "Jaws", "Mayday", "Xenia", "Trevelyan", "BaronSamedi" };
str HeadTypes[29] = { "Alan", "B", "Chris", "Dave", "Des", "Duncan", "Dwayne", "Graeme", "Grant", "Jim", "Joel", "Joe2", "Joe", "Karl", "Ken", "Lee", "Mark", "Martin", "Neil", "Pete", "Robin", "Scott", "Shaun", "Stevee", "Steveh", "Mandy", "Marion", "Sally", "Vivien" };
str HatTypes[13] = { "", "BeretBlack", "BeretBlue", "BeretRed", "FurHatBlack", "FurHatBlue", "FurHatBrown", "HelmetGray", "HelmetGreen", "MoonHeadGear", "PeakedCap", "SideHatDarkGreen", "SideHatLightGreen" };
str GunTypes[28] = { "PP7", "DD44", "DualDD44", "Klobb", "DualKlobb", "KF7", "ZMG", "DualZMG", "D5k", "DualD5k", "Phantom", "DualPhantom", "AR33", "DualAR33", "RCP90", "DualRCP90", "AutoShotgun", "Sniper", "Cougar", "DualCougar", "Laser", "DualLaser", "GrenadeL", "RocketL", "SCombo", "XCombo", "OddjobHat", "SilverPP7"};

/*function int SetPointerExt(int assign_slot, int tid, int assign_to_tid) 
{
	int a = ActivatorTID(); // Get original activator tid if there is an activator (I have ASSUMED that it returns 0 if there is no activator)
	Thing_ChangeTID(0, UniqueTID()); // Create temporary, unique activator tid
	int temp = ActivatorTID(); // Get temporary activator tid (0 if there is no activator)

	if(SetActivator(assign_to_tid)) 
		SetPointer(assign_slot, temp); // If an activator (assign_to_tid) is set, assign a pointer value to it.
	if(SetActivator(temp)) 
		Thing_ChangeTID(0, a); // If an activator (temp) is set, restore its original tid (a).
		
	return 0;
}*/

Script "Goldeneye_HatShot" (void)
{
	str thrownhat = HatTypes[CheckInventory("Goldeneye_HatShotToken")];
	if(StrLen(thrownhat) == 0)
		terminate;

	if(CheckInventory("Goldeneye_HatShotToken") == 7 || CheckInventory("Goldeneye_HatShotToken") == 8)
	{
		PlaySound(0,"Goldeneye/SlapperMetal",CHAN_7,1.0,0,ATTN_NORM);
		SetResultValue(-1);
		if(random(0,1) == 1)
		{
			terminate;
		}
	}
	else 
	{ 
		SetResultValue(3); 
	}
	SpawnForced(StrParam(s:"Goldeneye_",s:thrownhat,s:"_Drop"),GetActorX(0),GetActorY(0),GetActorZ(0) + 48.0,0,0);
	TakeInventory("Goldeneye_HatShotToken",12);
	SetActivator(0,AAPTR_Tracer);
	Thing_Remove(0);
}

Script "GoldeneyeEnemyLoop" (void)
{
	int oldX, oldY, oldZ;
	While(ClassifyActor(0) > 1)
	{
		if(GetActorX(0) != oldX || GetActorY(0) != oldY || GetActorZ(0) != oldZ)
		{
			oldX = GetActorX(0);	oldY = GetActorY(0);	oldZ = GetActorZ(0);
			GiveInventory("Goldeneye_UpdateChildren",1);
		}
		Delay(1);
	}
}

Script "GoldeneyePartPositioner" (void)
{
	Warp(AAPTR_MASTER,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_USEPTR|WARPF_COPYINTERPOLATION);
}

Script "GoldeneyeEnemyPartsPicker" (int type, int ec)
{
	str glasses;
	int elitechance, hattype, guntype, randnum;
	int newtid = UniqueTID();
	int bodytid = UniqueTID();
	int headtid = UniqueTID();
	int hattid = UniqueTID();
	int guntid = UniqueTID();
	int misctid = UniqueTID();
	int activator = ActivatorTID();
	Thing_ChangeTID(0, newtid);
	//Spawn the parts
	if(type != 6 && type != 13 && type != 14 && type != 15 && type != 16 && type != 17 && type != 18 && type != 19 && type != 20 && type != 22 && type != 23)
	{
		elitechance = ec; 
		int eliterand = random(0,100);
		if(elitechance > eliterand)
			glasses = "_Shades";
		else if(elitechance != -1)
			glasses = "_NoShades";
		else
			glasses = "";			
		int randomhead = random(0,24);
		if(HeadTypes[randomhead] == "Joe2")
			glasses = "";
		SpawnForced(StrParam(s:"Goldeneye_",s:HeadTypes[randomhead],s:glasses),0,0,0,headtid);
		SetActivator(headtid,AAPTR_DEFAULT);
		SetPointer(AAPTR_MASTER,newtid);	
	}
	else if(type == 19)
	{
		int randomheadfem = random(25,28);	
		glasses = "";
		SpawnForced(StrParam(s:"Goldeneye_",s:HeadTypes[randomheadfem],s:glasses),0,0,0,headtid);
		SetActivator(headtid,AAPTR_DEFAULT);
		SetPointer(AAPTR_MASTER,newtid);	
	}	
	switch(type)
	{
		case 1:	
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[6]),0,0,0,bodytid);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);		
			randnum = random(0,100);
			if(randnum >= 50) 
				hattype = 6;
			SpawnForced(StrParam(s:"Goldeneye_",s:HatTypes[hattype]),0,0,0,hattid);
			SetActivator(hattid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			
			guntype = 5;
			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:GunTypes[guntype]),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(0,APROP_Mass,200+(1+guntype));
			GiveInventory("Goldeneye_HatShotToken",hattype);
			GiveActorInventory(hattid,"Goldeneye_IsHat",1);
			SetPointer(AAPTR_TRACER,hattid);
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(headtid,0);
			Thing_ChangeTID(hattid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;
		case 2:	
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[5]),0,0,0,bodytid);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);		
			randnum = random(0,100);
			if(randnum >= 66) 
				hattype = 4;
			else if(randnum >= 33) 
				hattype = 1;
			SpawnForced(StrParam(s:"Goldeneye_",s:HatTypes[hattype]),0,0,0,hattid);
			SetActivator(hattid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			
			if(randnum >= 80)
				guntype = 2;
			else if(randnum >= 40)
				guntype = 1;
			else 
				guntype = 5;
			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:GunTypes[guntype]),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(0,APROP_Mass,200+(1+guntype));
			GiveInventory("Goldeneye_HatShotToken",hattype);
			GiveActorInventory(hattid,"Goldeneye_IsHat",1);
			SetPointer(AAPTR_TRACER,hattid);
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(headtid,0);
			Thing_ChangeTID(hattid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;
		case 3:	
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[10]),0,0,0,bodytid);
			GiveActorInventory(newtid,"Goldeneye_GrenadeThrower", 1);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);		
			randnum = random(0,100);
			if(randnum >= 75) 
				hattype = 11;
			else if(randnum >= 50) 
				{ hattype = 8; SetActorProperty(newtid,APROP_Health,60); }				
			else 
				hattype = 3;
			SpawnForced(StrParam(s:"Goldeneye_",s:HatTypes[hattype]),0,0,0,hattid);
			SetActivator(hattid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			randnum = random(0,100);
			if(hattype == 3)
			{
				if(randnum >= 50)
					guntype = 3;
				else	
					guntype = 4;
			}		
			else
			{
				if(randnum <= 9)
					guntype = 4;
				else if(randnum <= 14)
					guntype = 22;								
				else if(randnum <= 19)
					guntype = 23;					
				else if(randnum <= 33)
					guntype = 3;
				else	
					guntype = 5;
			}		
			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:GunTypes[guntype]),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(0,APROP_Mass,200+(1+guntype));
			GiveInventory("Goldeneye_HatShotToken",hattype);
			GiveActorInventory(hattid,"Goldeneye_IsHat",1);
			SetPointer(AAPTR_TRACER,hattid);
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(headtid,0);
			Thing_ChangeTID(hattid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;
		case 4:	
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[12]),0,0,0,bodytid);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);		
			randnum = random(0,100);
			if(randnum >= 50) 
				{ hattype = 7; SetActorProperty(newtid,APROP_Health,80); }
			SpawnForced(StrParam(s:"Goldeneye_",s:HatTypes[hattype]),0,0,0,hattid);
			SetActivator(hattid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			
			randnum = random(0,100);
			
			if(randnum >=40)
				guntype = 5;
			else if (randnum >= 20)
				guntype = 6;
			else 
				guntype = 7;
			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:GunTypes[guntype]),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(0,APROP_Mass,200+(1+guntype));
			GiveInventory("Goldeneye_HatShotToken",hattype);
			GiveActorInventory(hattid,"Goldeneye_IsHat",1);
			SetPointer(AAPTR_TRACER,hattid);
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(headtid,0);
			Thing_ChangeTID(hattid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;		
		case 5:	
			SetActorProperty(newtid,APROP_Health,100);
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[1]),0,0,0,bodytid);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);		
			randnum = random(0,100);
			if(glasses == "_Shades")
			{
				SetActorProperty(newtid,APROP_Health,160);
				GiveActorInventory(newtid,"Goldeneye_GuardTierToken", 1);
				if(randnum >= 50)
					hattype = 2;
				else
					hattype = 0;
			}
			else
			{
				if(randnum >= 50)
					hattype = 5;
				else 
					hattype = 0;
			}		
			SpawnForced(StrParam(s:"Goldeneye_",s:HatTypes[hattype]),0,0,0,hattid);
			SetActivator(hattid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			
			randnum = random(0,100);
			if(glasses == "_Shades")
			{
				if(randnum >= 50)
					guntype = 4;
				else
					guntype = 2;
			}
			else
			{
				if(randnum >= 50)
					guntype = 3;
				else
					guntype = 5;
			}	
			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:GunTypes[guntype]),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(0,APROP_Mass,200+(1+guntype));
			GiveInventory("Goldeneye_HatShotToken",hattype);
			GiveActorInventory(hattid,"Goldeneye_IsHat",1);
			SetPointer(AAPTR_TRACER,hattid);
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(headtid,0);
			Thing_ChangeTID(hattid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;	
		case 6:	
			SetActorProperty(newtid,APROP_Health,180);
			GiveActorInventory(newtid,"Goldeneye_GuardTierToken", 1);
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[14]),0,0,0,bodytid);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);		
			randnum = random(0,100);
			if(randnum >= 75) 
				guntype = 5;
			else if(randnum >= 50) 
				guntype = 3;
			else if(randnum >= 25)
				guntype = 17;
			else
				guntype = 24;
			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:GunTypes[guntype]),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(0,APROP_Mass,200+(1+guntype));
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;
		case 7:	
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[3]),0,0,0,bodytid);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SpawnForced(StrParam(s:"Goldeneye_",s:HatTypes[10]),0,0,0,hattid);
			SetActivator(hattid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			randnum = random(0,100);
			if(randnum >= 66) { guntype = 0; GiveActorInventory(newtid,"Goldeneye_GrenadeThrower", 1); }
			else if(randnum >= 33) 
				guntype = 1;
			else 
				guntype = 3;
			SetActorProperty(newtid,APROP_Health,50);
			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:GunTypes[guntype]),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(0,APROP_Mass,200+(1+guntype));
			GiveInventory("Goldeneye_HatShotToken",hattype);
			GiveActorInventory(hattid,"Goldeneye_IsHat",1);
			SetPointer(AAPTR_TRACER,hattid);
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;
		case 8:	
			SetActorProperty(newtid,APROP_Health,180);
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[2]),0,0,0,bodytid);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			randnum = random(0,100);
			if(randnum >= 50)  
				{ hattype = 8; SetActorProperty(newtid,APROP_Health,200); }
			SpawnForced(StrParam(s:"Goldeneye_",s:HatTypes[hattype]),0,0,0,hattid);	
			SetActivator(hattid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);			
			randnum = random(0,100);
			if(randnum >= 66) 
				guntype = 12;
			else if(randnum >= 33)
				guntype = 8;
			else
				guntype = 18;
			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:GunTypes[guntype]),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(0,APROP_Mass,200+(1+guntype));
			GiveInventory("Goldeneye_HatShotToken",hattype);
			GiveActorInventory(hattid,"Goldeneye_IsHat",1);
			SetPointer(AAPTR_TRACER,hattid);
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(headtid,0);
			Thing_ChangeTID(hattid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;
		case 9:	
			SetActorProperty(newtid,APROP_Health,360);
			GiveActorInventory(newtid,"Goldeneye_GuardTierToken", 1);
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[0]),0,0,0,bodytid);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);		
			randnum = random(0,100);
			if(randnum >= 50) 
				hattype = 1;
			SpawnForced(StrParam(s:"Goldeneye_",s:HatTypes[hattype]),0,0,0,hattid);
			SetActivator(hattid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			
			randnum = random(0,100);
			if(randnum >= 80)			
				guntype = 11;
			else if (randnum >= 75)
				guntype = 10;	
			else if (randnum >= 50)
				guntype = 9;
			else
				guntype = 8;
			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:GunTypes[guntype]),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(0,APROP_Mass,200+(1+guntype));
			GiveInventory("Goldeneye_HatShotToken",hattype);
			GiveActorInventory(hattid,"Goldeneye_IsHat",1);
			SetPointer(AAPTR_TRACER,hattid);
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(headtid,0);
			Thing_ChangeTID(hattid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;
		case 10:	
			SetActorProperty(newtid,APROP_Health,160);
			GiveActorInventory(newtid,"Goldeneye_GuardTierToken", 2);
			GiveActorInventory(newtid,"Goldeneye_GrenadeThrower", 1);
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[13]),0,0,0,bodytid);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);		
			randnum = random(0,100);
			if(randnum >= 66) 
				{ hattype = 1; SetActorProperty(newtid,APROP_Health,210); }
			else if (randnum >= 33)	
				{ hattype = 2; SetActorProperty(newtid,APROP_Health,260); }
			else
				{ hattype = 3; SetActorProperty(newtid,APROP_Health,300); }
			if(glasses == "_Shades")
				{ SetActorProperty(newtid,APROP_Health,300+(10*hattype)); }
			SpawnForced(StrParam(s:"Goldeneye_",s:HatTypes[hattype]),0,0,0,hattid);
			SetActivator(hattid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			
			randnum = random(0,100);
				if (randnum >= 96)
					guntype = 15;
				else if (randnum >= 80) 
					guntype = 7;
				else if	(randnum >= 72)
					guntype = 6;
				else if (randnum >= 64)
					guntype = 12;
				else if (randnum >= 56)
					guntype = 8;
				else if (randnum >= 48)
					guntype = 4;
				else if (randnum >= 32)
					guntype = 2;
				else if (randnum >= 24)
					guntype = 1;
				else if (randnum >= 16)
					guntype = 14;
				else if (randnum >= 8)
					guntype = 16;
				else 
					guntype = 5;
			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:GunTypes[guntype]),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(0,APROP_Mass,200+(1+guntype));
			GiveInventory("Goldeneye_HatShotToken",hattype);
			GiveActorInventory(hattid,"Goldeneye_IsHat",1);
			SetPointer(AAPTR_TRACER,hattid);
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(headtid,0);
			Thing_ChangeTID(hattid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;	
		case 11:
			SetActorProperty(newtid,APROP_Health,210);
			GiveActorInventory(newtid,"Goldeneye_GuardTierToken", 2);
			GiveActorInventory(newtid,"Goldeneye_GrenadeThrower", 1);
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[8]),0,0,0,bodytid);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);		
			randnum = random(0,100);
			if(randnum >= 50) 
				{ hattype = 9; SetActorProperty(newtid,APROP_Health,360); }
			SpawnForced(StrParam(s:"Goldeneye_",s:HatTypes[hattype]),0,0,0,hattid);
			SetActivator(hattid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			randnum = random(0,100);
			
			if(randnum >= 40)
				guntype = 12;
			else if(randnum >= 20)
				guntype = 20;
			else
				guntype = 21;
			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:GunTypes[guntype]),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(0,APROP_Mass,200+(1+guntype));
			GiveInventory("Goldeneye_HatShotToken",hattype);
			GiveActorInventory(hattid,"Goldeneye_IsHat",1);
			SetPointer(AAPTR_TRACER,hattid);
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(headtid,0);
			Thing_ChangeTID(hattid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;	
		case 12:	
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[4]),0,0,0,bodytid);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);		
			randnum = random(0,100);
			if(randnum >= 66) 
				hattype = 10;
			SpawnForced(StrParam(s:"Goldeneye_",s:HatTypes[hattype]),0,0,0,hattid);
			SetActivator(hattid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			randnum = random(0,100);
			
			if(randnum >= 80)
				guntype = 2;
			else if (randnum >= 70)
				guntype = 3;
			else if(randnum >= 60)
				guntype = 1;
			else if(randnum >= 40)
				guntype = 23;
			else if(randnum >= 30)
				guntype = 22;
			else
				guntype = 5;
			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:GunTypes[guntype]),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(0,APROP_Mass,200+(1+guntype));
			GiveInventory("Goldeneye_HatShotToken",hattype);
			GiveActorInventory(hattid,"Goldeneye_IsHat",1);
			SetPointer(AAPTR_TRACER,hattid);
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(headtid,0);
			Thing_ChangeTID(hattid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;		
		case 13:	
			SetActorProperty(newtid,APROP_Health,750);
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[15]),0,0,0,bodytid);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);		
			randnum = random(0,100);
			guntype = 26;
			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:GunTypes[guntype]),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(newtid,APROP_Mass,200+(1+guntype));
			SetActorProperty(bodytid,APROP_ScaleX,GetActorProperty(newtid,APROP_ScaleX));
			SetActorProperty(bodytid,APROP_ScaleY,GetActorProperty(newtid,APROP_ScaleY));
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;		
		case 14:	
			SetActorProperty(newtid,APROP_Health,600);
			GiveActorInventory(newtid,"Goldeneye_GuardTierToken", 2);
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[16]),0,0,0,bodytid);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);		
			randnum = random(0,100);
			guntype = 13;
			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:GunTypes[guntype]),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(newtid,APROP_Mass,200+(1+guntype));
			SetActorProperty(bodytid,APROP_ScaleX,GetActorProperty(newtid,APROP_ScaleX));
			SetActorProperty(bodytid,APROP_ScaleY,GetActorProperty(newtid,APROP_ScaleY));
			SetActorProperty(guntid,APROP_ScaleX,GetActorProperty(newtid,APROP_ScaleX));
			SetActorProperty(guntid,APROP_ScaleY,GetActorProperty(newtid,APROP_ScaleY));			
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;		
		case 15:	
			SetActorProperty(newtid,APROP_Health,700);
			GiveActorInventory(newtid,"Goldeneye_GuardTierToken", 3);
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[11]),0,0,0,bodytid);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);		
			randnum = random(0,100);
			guntype = 27;
			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:"PP7"),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(newtid,APROP_Mass,200+(1+guntype));
			SetActorProperty(bodytid,APROP_ScaleX,GetActorProperty(newtid,APROP_ScaleX));
			SetActorProperty(bodytid,APROP_ScaleY,GetActorProperty(newtid,APROP_ScaleY));
			SetActorProperty(guntid,APROP_ScaleX,GetActorProperty(newtid,APROP_ScaleX));
			SetActorProperty(guntid,APROP_ScaleY,GetActorProperty(newtid,APROP_ScaleY));			
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;	
		case 16:	
			SetActorProperty(newtid,APROP_Health,400);
			GiveActorInventory(newtid,"Goldeneye_GuardTierToken", 3);
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[20]),0,0,0,bodytid);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);		

			guntype = 2;
			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:"DualDD44"),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(newtid,APROP_Mass,200+(1+guntype));
			SetActorProperty(bodytid,APROP_ScaleX,GetActorProperty(newtid,APROP_ScaleX));
			SetActorProperty(bodytid,APROP_ScaleY,GetActorProperty(newtid,APROP_ScaleY));
			SetActorProperty(guntid,APROP_ScaleX,GetActorProperty(newtid,APROP_ScaleX));
			SetActorProperty(guntid,APROP_ScaleY,GetActorProperty(newtid,APROP_ScaleY));			
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;
		case 17:	
			SetActorProperty(newtid,APROP_Health,500);
			GiveActorInventory(newtid,"Goldeneye_GuardTierToken", 3);
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[20]),0,0,0,bodytid);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);		

			guntype = 7;
			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:"DualDD44"),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(newtid,APROP_Mass,200+(1+guntype));
			SetActorProperty(bodytid,APROP_ScaleX,GetActorProperty(newtid,APROP_ScaleX));
			SetActorProperty(bodytid,APROP_ScaleY,GetActorProperty(newtid,APROP_ScaleY));
			SetActorProperty(guntid,APROP_ScaleX,GetActorProperty(newtid,APROP_ScaleX));
			SetActorProperty(guntid,APROP_ScaleY,GetActorProperty(newtid,APROP_ScaleY));			
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;
		case 18:	
			SetActorProperty(newtid,APROP_Health,600);
			GiveActorInventory(newtid,"Goldeneye_GuardTierToken", 3);
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[20]),0,0,0,bodytid);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);		
			
			guntype = 21;
			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:"DualDD44"),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(newtid,APROP_Mass,200+(1+guntype));
			SetActorProperty(bodytid,APROP_ScaleX,GetActorProperty(newtid,APROP_ScaleX));
			SetActorProperty(bodytid,APROP_ScaleY,GetActorProperty(newtid,APROP_ScaleY));
			SetActorProperty(guntid,APROP_ScaleX,GetActorProperty(newtid,APROP_ScaleX));
			SetActorProperty(guntid,APROP_ScaleY,GetActorProperty(newtid,APROP_ScaleY));			
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;			
		case 19:
			SetActorProperty(newtid,APROP_Health,210);
			GiveActorInventory(newtid,"Goldeneye_GuardTierToken", 2);
			GiveActorInventory(newtid,"Goldeneye_GrenadeThrower", 1);
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[7]),0,0,0,bodytid);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);		
			randnum = random(0,100);
			if(randnum >= 50) 
				{ hattype = 9; SetActorProperty(newtid,APROP_Health,360); }
			SpawnForced(StrParam(s:"Goldeneye_",s:HatTypes[hattype]),0,0,0,hattid);
			SetActivator(hattid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			randnum = random(0,100);
			
			if(randnum >= 40)
				guntype = 12;
			else if(randnum >= 20)
				guntype = 20;
			else
				guntype = 21;
			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:GunTypes[guntype]),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(0,APROP_Mass,200+(1+guntype));
			GiveInventory("Goldeneye_HatShotToken",hattype);
			GiveActorInventory(hattid,"Goldeneye_IsHat",1);
			SetPointer(AAPTR_TRACER,hattid);
			SetActorProperty(bodytid,APROP_ScaleX,GetActorProperty(newtid,APROP_ScaleX));
			SetActorProperty(bodytid,APROP_ScaleY,GetActorProperty(newtid,APROP_ScaleY));
			SetActorProperty(headtid,APROP_ScaleX,GetActorProperty(newtid,APROP_ScaleX));
			SetActorProperty(headtid,APROP_ScaleY,GetActorProperty(newtid,APROP_ScaleY));			
			SetActorProperty(guntid,APROP_ScaleX,GetActorProperty(newtid,APROP_ScaleX));
			SetActorProperty(guntid,APROP_ScaleY,GetActorProperty(newtid,APROP_ScaleY));	
			SetActorProperty(hattid,APROP_ScaleX,GetActorProperty(newtid,APROP_ScaleX));
			SetActorProperty(hattid,APROP_ScaleY,GetActorProperty(newtid,APROP_ScaleY));				
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(headtid,0);
			Thing_ChangeTID(hattid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;		
		case 20:
			GiveActorInventory(newtid,"Goldeneye_GrenadeThrower",1);
			GiveActorInventory(newtid,"Goldeneye_GuardTierToken", 3);
			SetActorProperty(newtid,APROP_Health,2500);
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[19]),0,0,0,bodytid);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			randnum = random(0,100);
			if(randnum >= 67)
				guntype = 12;
			else if(randnum >= 33)
				guntype = 16;
			else
				guntype = 6;	
			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:GunTypes[guntype]),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(newtid,APROP_Mass,200+(1+guntype));
			SetActorProperty(bodytid,APROP_ScaleX,GetActorProperty(newtid,APROP_ScaleX));
			SetActorProperty(bodytid,APROP_ScaleY,GetActorProperty(newtid,APROP_ScaleY));
			SetActorProperty(guntid,APROP_ScaleX,GetActorProperty(newtid,APROP_ScaleX));
			SetActorProperty(guntid,APROP_ScaleY,GetActorProperty(newtid,APROP_ScaleY));			
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;		
		case 21:
			SetActorProperty(newtid,APROP_Health,100);
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[0]),0,0,0,bodytid);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SpawnForced("Goldeneye_JetPack",0,0,0,misctid);
			SetActivator(misctid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			randnum = random(0,100);
			if(randnum >= 50) 
				hattype = 1;
			SpawnForced(StrParam(s:"Goldeneye_",s:HatTypes[hattype]),0,0,0,hattid);
			SetActivator(hattid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			
			randnum = random(0,100);
			if(randnum >= 80)			
				guntype = 11;
			else if (randnum >= 75)
				guntype = 10;	
			else if (randnum >= 50)
				guntype = 9;
			else
				guntype = 8;
			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:GunTypes[guntype]),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(0,APROP_Mass,200+(1+guntype));
			GiveInventory("Goldeneye_HatShotToken",hattype);
			GiveActorInventory(hattid,"Goldeneye_IsHat",1);
			SetPointer(AAPTR_TRACER,hattid);
			Thing_ChangeTID(misctid,0);
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(headtid,0);
			Thing_ChangeTID(hattid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;	
		case 22:
			SetActorProperty(newtid,APROP_Health,700);
			GiveActorInventory(newtid,"Goldeneye_GuardTierToken", 2);
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[17]),0,0,0,bodytid);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);		

			guntype = 19;

			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:GunTypes[guntype]),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(0,APROP_Mass,200+(1+guntype));
			SetActorProperty(bodytid,APROP_ScaleX,GetActorProperty(newtid,APROP_ScaleX));
			SetActorProperty(bodytid,APROP_ScaleY,GetActorProperty(newtid,APROP_ScaleY));	
			SetActorProperty(guntid,APROP_ScaleX,GetActorProperty(newtid,APROP_ScaleX));
			SetActorProperty(guntid,APROP_ScaleY,GetActorProperty(newtid,APROP_ScaleY));			
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;	
		case 23:
			SetActorProperty(newtid,APROP_Health,1200);
			GiveActorInventory(newtid,"Goldeneye_GuardTierToken", 3);
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[18]),0,0,0,bodytid);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);		

			guntype = 25;

			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:GunTypes[guntype]),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(0,APROP_Mass,200+(1+guntype));
			SetActorProperty(bodytid,APROP_ScaleX,GetActorProperty(newtid,APROP_ScaleX));
			SetActorProperty(bodytid,APROP_ScaleY,GetActorProperty(newtid,APROP_ScaleY));	
			SetActorProperty(guntid,APROP_ScaleX,GetActorProperty(newtid,APROP_ScaleX));
			SetActorProperty(guntid,APROP_ScaleY,GetActorProperty(newtid,APROP_ScaleY));			
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;			
	}
}

Script "GoldeneyeEnemyDrops" (void)
{
	int x,y,z,guntype,randnum;
	str mag;
	x = GetActorVelX(0);
	y = GetActorVelY(0);
	z = GetActorVelZ(0);
	guntype = GetActorProperty(0,APROP_MASS)-201;
	str dual = GunTypes[guntype];
	if(guntype <= 16 || guntype == 27)
	{
		randnum = random(0,100);
		if (randnum <= 15)
			mag = "mag";
		else
			mag = "";
	}
	else
	{
		mag = "";
	}	
		
	if(StrLeft(dual,4) == "Dual")
	{
		SpawnForced(StrParam(s:"Goldeneye_",s:StrRight(dual, StrLen(dual)-4),s:mag,s:"EnemyDrop"),GetActorX(0),GetActorY(0),GetActorZ(0) + (X+45.0),(y+0),(z+random(40.0,48.0)));
		SpawnForced(StrParam(s:"Goldeneye_",s:StrRight(dual, StrLen(dual)-4),s:mag,s:"EnemyDrop"),GetActorX(0),GetActorY(0),GetActorZ(0) + (X+-45.0),(y+0),(z+random(40.0,48.0)));
	}	
	else if(StrLeft(dual,6) == "Silver")
	{
		SpawnForced(StrParam(s:"Goldeneye_",s:StrRight(dual, StrLen(dual)-6),s:mag,s:"EnemyDrop"),GetActorX(0),GetActorY(0),GetActorZ(0) + (X+45.0),(y+0),(z+random(40.0,48.0)));	
	}	
	else if(StrRight(dual,5) == "Combo")
	{
		if(StrLeft(dual,1) == "X")
		{
			SpawnForced(StrParam(s:"Goldeneye_",s:GunTypes[14],s:mag,s:"EnemyDrop"),GetActorX(0),GetActorY(0),GetActorZ(0) + (X+45.0),(y+0),(z+random(40.0,48.0)));
			SpawnForced(StrParam(s:"Goldeneye_",s:GunTypes[22],s:mag,s:"EnemyDrop"),GetActorX(0),GetActorY(0),GetActorZ(0) + (X+-45.0),(y+0),(z+random(40.0,48.0)));		
		}
		else
		{
			SpawnForced(StrParam(s:"Goldeneye_",s:GunTypes[3],s:mag,s:"EnemyDrop"),GetActorX(0),GetActorY(0),GetActorZ(0) + (X+45.0),(y+0),(z+random(40.0,48.0)));
			SpawnForced(StrParam(s:"Goldeneye_",s:GunTypes[17],s:mag,s:"EnemyDrop"),GetActorX(0),GetActorY(0),GetActorZ(0) + (X+-45.0),(y+0),(z+random(40.0,48.0)));	
		}	
	}
		
	else
	{
		SpawnForced(StrParam(s:"Goldeneye_",s:dual,s:mag,s:"EnemyDrop"),GetActorX(0),GetActorY(0),GetActorZ(0) + (X+45.0),(y+0),(z+random(40.0,48.0)));
	}
}	
	
Script "GoldeneyePartBroadcast" (int state)
{
	switch(state)
	{
		case 1:
			SetActorState(0,"Spawn2",true);
			break;
		case 2:
			SetActorState(0,"SeeTwoHand",true);
			break;
		case 3:
			SetActorState(0,"SpawnDual",true);
			break;
		case 4:
			SetActorState(0,"IdleAdjustCrotch",true);
			break;
		case 5:
			SetActorState(0,"IdleScratchButt",true);
			break;
		case 6:
			SetActorState(0,"IdleScratchLeg",true);
			break;
		case 7:
			SetActorState(0,"IdleYawning",true);
			break;
		case 8:
			SetActorState(0,"IdleSwatFlies",true);
			break;
		case 9:
			SetActorState(0,"SeeSingleDual",true);
			break;
		case 10:
			SetActorState(0,"Pain.Neck",true);
			break;
		case 11:
			SetActorState(0,"Pain.LeftShoulder",true);
			break;
		case 12:
			SetActorState(0,"Pain.RightShoulder",true);
			break;
		case 13:
			SetActorState(0,"Pain.LeftArm",true);
			break;
		case 14:
			SetActorState(0,"Pain.RightArm",true);
			break;
		case 15:
			SetActorState(0,"Pain.LeftHand",true);
			break;
		case 16:
			SetActorState(0,"Pain.RightHand",true);
			break;
		case 17:
			SetActorState(0,"Pain.Crotch",true);
			break;
		case 18:
			SetActorState(0,"Pain.Butt",true);
			break;
		case 19:
			SetActorState(0,"Pain.Butt2",true);
			break;
		case 20:
			SetActorState(0,"Pain.LeftLeg",true);
			break;
		case 21:
			SetActorState(0,"Pain.RightLeg",true);
			break;
		case 22:
			SetActorState(0,"DeathHeadShot",true);
			break;
		case 23:
			SetActorState(0,"DeathNeck",true);
			break;
		case 24:
			SetActorState(0,"DeathOnKnees",true);
			break;
		case 25:
			SetActorState(0,"DeathOnSide",true);
			break;
		case 26:
			SetActorState(0,"DeathShoulderBack",true);
			break;
		case 27:
			SetActorState(0,"DeathCrossFeet",true);
			break;
		case 28:
			SetActorState(0,"DeathSprawlOut",true);
			break;
		case 29:
			SetActorState(0,"DeathFaceUp",true);
			break;
		case 30:
			SetActorState(0,"DeathFaceUpFlip",true);
			break;
		case 31:
			SetActorState(0,"DeathFetalLeft",true);
			break;
		case 32:
			SetActorState(0,"DeathFetalRight",true);
			break;
		case 33:
			SetActorState(0,"DeathJumpBack",true);
			break;
		case 34:
			SetActorState(0,"DeathStaggerWall",true);
			break;
		case 35:
			SetActorState(0,"DeathExplosionBack",true);
			break;
		case 36:
			SetActorState(0,"DeathExplosionBack2",true);
			break;
		case 37:
			SetActorState(0,"DeathExplosionForward",true);
			break;
		case 38:
			SetActorState(0,"DeathExplosionForwardRoll",true);
			break;
		case 39:
			SetActorState(0,"DeathExplosionLeft",true);
			break;
		case 40:
			SetActorState(0,"DeathExplosionLeft2",true);
			break;
		case 41:
			SetActorState(0,"DeathExplosionRight",true);
			break;
		case 42:
			SetActorState(0,"DeathFaceGround",true);
			break;
		case 43:
			SetActorState(0,"DeathFlyBack",true);
			break;
		case 44:
			SetActorState(0,"FireKF7AimBow",true);
			break;
		case 45:
			SetActorState(0,"FireKF7AimHip",true);
			break;
		case 46:
			SetActorState(0,"FireKF7AimToFire",true);
			break;
		case 47:
			SetActorState(0,"FireKF7Crouch",true);
			break;
		case 48:
			SetActorState(0,"FireKF7JumpToLeft",true);
			break;
		case 49:
			SetActorState(0,"FireKF7JumpToRight",true);
			break;
		case 50:
			SetActorState(0,"FireKF7RollLeft",true);
			break;
		case 51:
			SetActorState(0,"FireKF7RollRight",true);
			break;
		case 52:
			SetActorState(0,"FireDD44StepForward",true);
			break;		
		case 53:
			SetActorState(0,"FireDD44StepForwardEnd",true);
			break;	
		case 54:
			SetActorState(0,"FireDD44Kneel",true);
			break;	
		case 55:
			SetActorState(0,"FireDD44KneelEnd",true);
			break;			
		case 56:
			SetActorState(0,"FireDD44DualStand",true);
			break;	
		case 57:
			SetActorState(0,"FireDD44DualStandEnd",true);
			break;	
		case 58:
			SetActorState(0,"FireDD44DualKneel",true);
			break;	
		case 59:
			SetActorState(0,"FireDD44DualKneelEnd",true);
			break;	
		case 60:
			SetActorState(0,"FireDD44DualCrossKneel",true);
			break;	
		case 61:
			SetActorState(0,"FireDD44DualCrossKneelEnd",true);
			break;	
		case 62:
			SetActorState(0,"FireKlobbStepForward",true);
			break;		
		case 63:
			SetActorState(0,"FireKlobbKneel",true);
			break;		
		case 64:
			SetActorState(0,"FireKlobbDualStand",true);
			break;		
		case 65:
			SetActorState(0,"FireKlobbDualKneel",true);
			break;	
		case 66:
			SetActorState(0,"FireKlobbDualCrossKneel",true);
			break;		
		case 67:
			SetActorState(0,"FirePP7StepForward",true);
			break;		
		case 68:
			SetActorState(0,"FirePP7StepForwardEnd",true);
			break;	
		case 69:
			SetActorState(0,"FirePP7Kneel",true);
			break;	
		case 70:
			SetActorState(0,"FirePP7KneelEnd",true);
			break;	
		case 71:
			SetActorState(0,"Death.Zorch",true);
			break;	
		case 72:
			SetActorState(0,"Death.Ice",true);
			break;	
		case 73:
			SetActorState(0,"Death.Nuke",true);
			break;	
		case 74:
			SetActorState(0,"Disintegrate",true);
			break;
		case 75:
			SetActorState(0,"ThrowGrenade",true);
			break;			
		case 76:
			SetActorState(0,"Pain.Tesla",true);
			break;				
		case 77:
			SetActorState(0,"FireD5KAimBow",true);
			break;	
		case 78:
			SetActorState(0,"FireD5KAimHip",true);
			break;		
		case 79:
			SetActorState(0,"FireD5KAimToFire",true);
			break;	
		case 80:
			SetActorState(0,"FireD5KCrouch",true);
			break;	
		case 81:
			SetActorState(0,"FireD5KJumpToLeft",true);
			break;	
		case 82:
			SetActorState(0,"FireD5KJumpToRight",true);
			break;		
		case 83:
			SetActorState(0,"FireD5KRollLeft",true);
			break;	
		case 84:
			SetActorState(0,"FireD5KRollRight",true);
			break;		
		case 85:
			SetActorState(0,"FireAR33AimBow",true);
			break;	
		case 86:
			SetActorState(0,"FireAR33AimHip",true);
			break;			
		case 87:
			SetActorState(0,"FireAR33AimToFire",true);
			break;
		case 88:
			SetActorState(0,"FireAR33Crouch",true);
			break;	
		case 89:
			SetActorState(0,"FireAR33JumpToLeft",true);
			break;	
		case 90:
			SetActorState(0,"FireAR33JumpToRight",true);
			break;	
		case 91:
			SetActorState(0,"FireAR33RollLeft",true);
			break;	
		case 92:
			SetActorState(0,"FireAR33RollRight",true);
			break;	
		case 93:
			SetActorState(0,"FireZMGStepForward",true);
			break;	
		case 94:
			SetActorState(0,"FireZMGKneel",true);
			break;	
		case 95:
			SetActorState(0,"FireZMGDualStand",true);
			break;	
		case 96:
			SetActorState(0,"FireZMGDualKneel",true);
			break;	
		case 97:
			SetActorState(0,"FireZMGDualCrossKneel",true);
			break;	
		case 98:
			SetActorState(0,"FireD5KStepForward",true);
			break;
		case 99:
			SetActorState(0,"FireD5KKneel",true);
			break;
		case 100:
			SetActorState(0,"FireD5KDualStand",true);
			break;	
		case 101:
			SetActorState(0,"FireD5KDualKneel",true);
			break;	
		case 102:
			SetActorState(0,"FireD5KDualCrossKneel",true);
			break;	
		case 103:
			SetActorState(0,"FireSniperAimBow",true);
			break;		
		case 104:
			SetActorState(0,"FireSniperAimHip",true);
			break;	
		case 105:
			SetActorState(0,"FireSniperAimToFire",true);
			break;	
		case 106:
			SetActorState(0,"FireSniperCrouch",true);
			break;		
		case 107:
			SetActorState(0,"FireSniperJumpToLeft",true);
			break;		
		case 108:
			SetActorState(0,"FireSniperJumpToRight",true);
			break;	
		case 109:
			SetActorState(0,"FireSniperRollLeft",true);
			break;	
		case 110:
			SetActorState(0,"FireSniperRollRight",true);
			break;	
		case 111:
			SetActorState(0,"FireKF7Run",true);
			break;	
		case 112:
			SetActorState(0,"FireD5KRun",true);
			break;	
		case 113:
			SetActorState(0,"FireAR33Run",true);
			break;	
		case 114:
			SetActorState(0,"FireSniperRun",true);
			break;	
		case 115:
			SetActorState(0,"FirePhantomAimBow",true);
			break;	
		case 116:
			SetActorState(0,"FirePhantomAimHip",true);
			break;	
		case 117:
			SetActorState(0,"FirePhantomAimToFire",true);
			break;		
		case 118:
			SetActorState(0,"FirePhantomCrouch",true);
			break;		
		case 119:
			SetActorState(0,"FirePhantomJumpToLeft",true);
			break;		
		case 120:
			SetActorState(0,"FirePhantomJumpToRight",true);
			break;	
		case 121:
			SetActorState(0,"FirePhantomRollLeft",true);
			break;		
		case 122:
			SetActorState(0,"FirePhantomRollRight",true);
			break;	
		case 123:
			SetActorState(0,"FirePhantomRun",true);
			break;		
		case 124:
			SetActorState(0,"FirePhantomStepForward",true);
			break;	
		case 125:
			SetActorState(0,"FirePhantomKneel",true);
			break;	
		case 126:
			SetActorState(0,"FirePhantomDualStand",true);
			break;		
		case 127:
			SetActorState(0,"FirePhantomDualKneel",true);
			break;	
		case 128:
			SetActorState(0,"FirePhantomDualCrossKneel",true);
			break;			
	}
}

Script "GoldeneyePartBroadcast2" (int State) // yeah, it needed a sequel
{
	switch(state)
	{
		case 1:
			SetActorState(0,"FireKlobbDualWalk",true);
			break;	
		case 2:
			SetActorState(0,"FireDD44DualWalk",true);
			break;	
		case 3:
			SetActorState(0,"FireDD44DualWalkEnd",true);
			break;	
		case 4:
			SetActorState(0,"FireZMGDualWalk",true);
			break;	
		case 5:
			SetActorState(0,"FireD5KDualWalk",true);
			break;	
		case 6:
			SetActorState(0,"FirePhantomDualWalk",true);
			break;	
		case 7:
			SetActorState(0,"FireRCP90AimBow",true);
			break;		
		case 8:
			SetActorState(0,"FireRCP90AimHip",true);
			break;	
		case 9:
			SetActorState(0,"FireRCP90AimToFire",true);
			break;	
		case 10:
			SetActorState(0,"FireRCP90Crouch",true);
			break;	
		case 11:
			SetActorState(0,"FireRCP90JumpToRight",true);
			break;	
		case 12:
			SetActorState(0,"FireRCP90JumpToLeft",true);
			break;	
		case 13:
			SetActorState(0,"FireRCP90RollRight",true);
			break;	
		case 14:
			SetActorState(0,"FireRCP90RollLeft",true);
			break;	
		case 15:
			SetActorState(0,"FireRCP90Run",true);
			break;		
		case 16:
			SetActorState(0,"ThrowHat",true);
			break;		
		case 17:
			SetActorState(0,"FireAR33StepForward",true);
			break;
		case 18:
			SetActorState(0,"FireAR33Kneel",true);
			break;		
		case 19:
			SetActorState(0,"FireAR33DualStand",true);
			break;	
		case 20:
			SetActorState(0,"FireAR33DualKneel",true);
			break;
		case 21:
			SetActorState(0,"FireAR33DualCrossKneel",true);
			break;		
		case 22:
			SetActorState(0,"FireAR33DualWalk",true);
			break;	
		case 23:
			SetActorState(0,"FireLaserStepForward",true);
			break;	
		case 24:
			SetActorState(0,"FireLaserStepForwardEnd",true);
			break;		
		case 25:
			SetActorState(0,"FireLaserDualStand",true);
			break;		
		case 26:
			SetActorState(0,"FireLaserDualKneel",true);
			break;	
		case 27:
			SetActorState(0,"FireLaserDualCrossKneel",true);
			break;
		case 28:
			SetActorState(0,"FireLaserDualWalk",true);
			break;	
		case 29:
			SetActorState(0,"SamediDeathFaceGround",true);
			break;	
		case 30:
			SetActorState(0,"SpawnSamedi",true);
			break;	
		case 31:
			SetActorState(0,"FireRocketLauncherStepForward",true);
			break;	
		case 32:
			SetActorState(0,"FireRocketLauncherKneel",true);
			break;	
		case 33:
			SetActorState(0,"FireSniperAimBowEnd",true);
			break;		
		case 34:
			SetActorState(0,"FireSniperAimHipEnd",true);
			break;	
		case 35:
			SetActorState(0,"FireSniperAimToFireEnd",true);
			break;	
		case 36:
			SetActorState(0,"FireSniperCrouchEnd",true);
			break;	
		case 37:
			SetActorState(0,"FireSniperJumpToLeftEnd",true);
			break;			
		case 38:
			SetActorState(0,"FireSniperRollLeftEnd",true);
			break;			
		case 39:
			SetActorState(0,"FireSniperRollRightEnd",true);
			break;
		case 40:
			SetActorState(0,"FireSniperRunEnd",true);
			break;
		case 41:
			SetActorState(0,"FireAutoShotgunAimBow",true);
			break;	
		case 42:
			SetActorState(0,"FireAutoShotgunAimHip",true);
			break;		
		case 43:
			SetActorState(0,"FireAutoShotgunAimToFire",true);
			break;	
		case 44:
			SetActorState(0,"FireAutoShotgunCrouch",true);
			break;	
		case 45:
			SetActorState(0,"FireAutoShotgunJumpToLeft",true);
			break;	
		case 46:
			SetActorState(0,"FireAutoShotgunJumpToRight",true);
			break;		
		case 47:
			SetActorState(0,"FireAutoShotgunRollLeft",true);
			break;	
		case 48:
			SetActorState(0,"FireAutoShotgunRollRight",true);
			break;		
		case 49:
			SetActorState(0,"FireAutoShotgunRun",true);
			break;	
		case 50:
			SetActorState(0,"FireAutoShotgunAimBowEnd",true);
			break;	
		case 51:
			SetActorState(0,"FireAutoShotgunAimHipEnd",true);
			break;	
		case 52:
			SetActorState(0,"FireAutoShotgunAimToFireEnd",true);
			break;	
		case 53:
			SetActorState(0,"FireAutoShotgunCrouchEnd",true);
			break;
		case 54:
			SetActorState(0,"FireAutoShotgunJumpToLeftEnd",true);
			break;	
		case 55:
			SetActorState(0,"FireAutoShotgunRollLeftEnd",true);
			break;	
		case 56:
			SetActorState(0,"FireAutoShotgunRollRightEnd",true);
			break;	
		case 57:
			SetActorState(0,"FireAutoShotgunRunEnd",true);
			break;
		case 58:
			SetActorState(0,"FireRCP90StepForward",true);
			break;	
		case 59:
			SetActorState(0,"FireRCP90Kneel",true);
			break;	
		case 60:
			SetActorState(0,"FireRCP90DualStand",true);
			break;	
		case 61:
			SetActorState(0,"FireRCP90DualKneel",true);
			break;	
		case 62:
			SetActorState(0,"FireRCP90DualCrossKneel",true);
			break;
		case 63:
			SetActorState(0,"FireRCP90DualWalk",true);
			break;	
		case 64:
			SetActorState(0,"FireRocketLauncherStepForwardEnd",true);
			break;	
		case 65:
			SetActorState(0,"FireRocketLauncherKneelEnd",true);
			break;	
		case 66:
			SetActorState(0,"IgnitionTwoHand",true);
			break;	
		case 67:
			SetActorState(0,"IgnitionDual",true);
			break;	
		case 68:
			SetActorState(0,"FireCougarStepForward",true);
			break;	
		case 69:
			SetActorState(0,"FireCougarKneel",true);
			break;		
		case 70:
			SetActorState(0,"FireCougarStepForwardEnd",true);
			break;	
		case 71:
			SetActorState(0,"FireCougarKneelEnd",true);
			break;		
		case 72:
			SetActorState(0,"FireCougarDualStand",true);
			break;		
		case 73:
			SetActorState(0,"FireCougarDualStandEnd",true);
			break;		
		case 74:
			SetActorState(0,"FireCougarDualKneel",true);
			break;		
		case 75:
			SetActorState(0,"FireCougarDualKneelEnd",true);
			break;	
		case 76:
			SetActorState(0,"FireCougarDualCrossKneel",true);
			break;	
		case 77:
			SetActorState(0,"FireCougarDualCrossKneelEnd",true);
			break;	
		case 78:
			SetActorState(0,"FireCougarDualWalk",true);
			break;			
		case 79:
			SetActorState(0,"FireCougarDualWalkEnd",true);
			break;	
		case 80:
			SetActorState(0,"FireGrenadeLauncherAimHip",true);
			break;	
		case 81:
			SetActorState(0,"FireGrenadeLauncherAimHipEnd",true);
			break;
		case 82:
			SetActorState(0,"FireGrenadeLauncherAimBow",true);
			break;	
		case 83:
			SetActorState(0,"FireGrenadeLauncherAimBowEnd",true);
			break;
		case 84:
			SetActorState(0,"FireGrenadeLauncherAimToFire",true);
			break;	
		case 85:
			SetActorState(0,"FireGrenadeLauncherAimToFireEnd",true);
			break;		
		case 86:
			SetActorState(0,"FireGrenadeLauncherCrouch",true);
			break;	
		case 87:
			SetActorState(0,"FireGrenadeLauncherCrouchEnd",true);
			break;	
		case 88:
			SetActorState(0,"FireGrenadeLauncherJumpToLeft",true);
			break;	
		case 89:
			SetActorState(0,"FireGrenadeLauncherJumpToLeftEnd",true);
			break;		
		case 90:
			SetActorState(0,"FireGrenadeLauncherJumpToRight",true);
			break;		
		case 91:
			SetActorState(0,"FireGrenadeLauncherRollLeft",true);
			break;	
		case 92:
			SetActorState(0,"FireGrenadeLauncherRollLeftEnd",true);
			break;		
		case 93:
			SetActorState(0,"FireGrenadeLauncherRollRight",true);
			break;		
		case 94:
			SetActorState(0,"FireGrenadeLauncherRollRightEnd",true);
			break;	
		case 95:
			SetActorState(0,"FireGrenadeLauncherRun",true);
			break;		
		case 96:
			SetActorState(0,"FireGrenadeLauncherRunEnd",true);
			break;
		case 97:
			SetActorState(0,"FireXeniaComboStand",true);
			break;			
		case 98:
			SetActorState(0,"FireXeniaComboKneel",true);
			break;			
		case 99:
			SetActorState(0,"FireXeniaComboCrossKneel",true);
			break;		
		case 100:
			SetActorState(0,"FireXeniaComboWalk",true);
			break;		
		case 101:
			SetActorState(0,"FireSniperStepForward",true);
			break;	
		case 102:
			SetActorState(0,"FireSniperKneel",true);
			break;		
		case 103:
			SetActorState(0,"FireSiberianComboStand",true);
			break;		
		case 104:
			SetActorState(0,"FireSiberianComboKneel",true);
			break;	
		case 105:
			SetActorState(0,"FireSiberianComboCrossKneel",true);
			break;	
		case 106:
			SetActorState(0,"FireSiberianComboWalk",true);
			break;				
		case 107:
			SetActorState(0,"SprintSingleDual",true);
			break;		
		case 108:
			SetActorState(0,"FireKlobbDualRun",true);
			break;	
		case 109:
			SetActorState(0,"FireZMGDualRun",true);
			break;
		case 110:
			SetActorState(0,"FireD5KDualRun",true);
			break;		
		case 111:
			SetActorState(0,"FireAR33DualRun",true);
			break;				
		case 112:
			SetActorState(0,"FirePhantomDualRun",true);
			break;			
		case 113:
			SetActorState(0,"FireRCP90DualRun",true);
			break;	
		case 114:
			SetActorState(0,"FireXeniaComboRun",true);
			break;		
		case 115:
			SetActorState(0,"FireSiberianComboRun",true);
			break;		
		case 116:
			SetActorState(0,"FireDD44DualRun",true);
			break;		
		case 117:
			SetActorState(0,"FireCougarDualRun",true);
			break;		
		case 118:
			SetActorState(0,"FireLaserDualRun",true);
			break;		
		case 119:
			SetActorState(0,"Walking",true);
			break;				
	}
}	

Script "Goldeneye_TranslationIce" (void)
{
	CreateTranslation(34, 0:255=%[0.039,0.0313,0.07]:[0.578,0.578,0.672]);
	Thing_SetTranslation(0, 34);
}	

Script "Goldeneye_TransferIceTranslation" (void)
{
	int activator = ActivatorTID();
	int newtid = UniqueTID();
	Thing_ChangeTID(0, newtid);
	SetActivator(0,AAPTR_Master);
	Thing_SetTranslation(newtid, -1);
	Thing_ChangeTID(newtid, activator);
}

int GunChances[28] = { 10, 10, 10, 15, 15, 5, 5, 5, 10, 10, 5, 5, 10, 0, 2, 2, 3, 15, 20, 15, 20, 15, 5, 5, 15, 3, 10, 15 };
int TracerDamage[28] = { 13, 13, 13, 6, 6, 13, 10, 10, 10, 10, 14, 14, 14, 14, 18, 18, 12, 20, 25, 25, 25, 25, 10, 10, 6, 18, 5, 25 };

Script "Goldeneye_TracerDamage" (void)
{
	SetActivatorToTarget(0);
	int hitchance, hitmul, guntype, skillchance, gunchance, randnum;
	int skill = GameSkill()+1;
	int guardtier = CheckInventory("Goldeneye_GuardTierToken");
    int guardchance = guardtier+2;
	guntype = GetActorProperty(0,APROP_MASS)-201;
	gunchance = GunChances[guntype];
	skillchance = 6*skill;			
	hitmul = (skillchance+gunchance) * guardchance;
	hitchance = hitmul/2;		
	randnum = random(0,100);	
	if(randnum <= hitchance)
		SetResultValue(TracerDamage[guntype]);
	else
		SetResultValue(0);
}

Script "Goldeneye_JetPackLoop" (void)
{
	While(ClassifyActor(0) != 1)
	{
		int smoketid = UniqueTid();
		int actorangle = GetActorAngle(0);
		SpawnForced("Goldeneye_JetPackSmoke",GetActorX(0)+(FixedMul(cos(actorangle),-8.0)),GetActorY(0)+(FixedMul(sin(actorangle),-8.0)),GetActorZ(0)+28.0,smoketid,random(0,1.0));
		SetActorVelocity(smoketid,random(-2.0,2.0),random(-2.0,2.0),random(-3.0,-2.0),0,0);
		Thing_ChangeTid(smoketid,0);
		Delay(2);
	}
}

Script "Goldeneye_GrenadePartDraw" (void)
{
	int activator = ActivatorTid();
	int newtid = UniqueTid();
	Thing_ChangeTid(0,newtid);
	int grenadetid = UniqueTID();
	SpawnForced("Goldeneye_GrenadePart",0,0,0,grenadetid);
	SetActivator(grenadetid,AAPTR_DEFAULT);
	SetPointer(AAPTR_MASTER,activator);
	Thing_ChangeTid(grenadetid,0);
	Thing_ChangeTid(newtid,activator);
}	