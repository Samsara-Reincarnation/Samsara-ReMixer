#define MAXMODES          	5
#define MAXTIERS          	5

Str MonsterTiers[MAX_GAME_TYPES][MAXMODES][MAXTIERS] =
{
	{
		{ "NarakaMorph_ShotgunGuy", "NarakaMorph_Spectre", "NarakaMorph_Cacodemon", "NarakaMorph_Baron", "NarakaMorph_Cyberdemon"},
		{ "NarakaMorph_NightmareImp", "NarakaMorph_Spectre64", "NarakaMorph_Arachnotron64", "NarakaMorph_Baron64", "NarakaMorph_MotherDemon"},
		{ "NarakaMorph_SuperShotgunGuy", "NarakaMorph_Spectre", "NarakaMorph_Cacodemon", "NarakaMorph_Baron", "NarakaMorph_Cyberdemon"},
	},
	{
		{ "NarakaMorph_ArmoredBipedicus", "NarakaMorph_Quadrumpus", "NarakaMorph_SuperCycloptis", "NarakaMorph_Maximus", "NarakaMorph_Snotfolus"},
	},
	{
		{ "NarakaMorph_NitroMummy", "NarakaMorph_Knight", "NarakaMorph_Weredragon", "NarakaMorph_Ironlich", "NarakaMorph_DSparil"},
	},
	{
		{ "NarakaMorph_SS", "NarakaMorph_Mutant", "NarakaMorph_HansGrosse", "NarakaMorph_BarnacleWilhelm", "NarakaMorph_Hitler" },
		{ "NarakaMorph_SS", "NarakaMorph_Mutant", "NarakaMorph_HansGrosse", "NarakaMorph_ProfessorQuarkblitz", "NarakaMorph_Hitler" },
		{ "NarakaMorph_SS", "NarakaMorph_Mutant", "NarakaMorph_HansGrosse", "NarakaMorph_Narbengesicht", "NarakaMorph_Hitler" },
	},
	{
		{ "NarakaMorph_Disciple", "NarakaMorph_CentaurLeader", "NarakaMorph_BrownChaosSerpent", "NarakaMorph_DeathWyvern", "NarakaMorph_Korax"},
		{ "NarakaMorph_Disciple", "NarakaMorph_CentaurLeader", "NarakaMorph_BrownChaosSerpent", "NarakaMorph_DeathWyvern", "NarakaMorph_Korax"},
		{ "NarakaMorph_Disciple", "NarakaMorph_CentaurLeader", "NarakaMorph_BrownChaosSerpent", "NarakaMorph_DeathWyvern", "NarakaMorph_Korax"},
	},
	{
		{ "NarakaMorph_PigCop", "NarakaMorph_AssaultCommander", "NarakaMorph_PigCopTank", "NarakaMorph_MiniBattleLord", "NarakaMorph_CycloidEmperor"},
		{ "NarakaMorph_PigCop", "NarakaMorph_AssaultCommander", "NarakaMorph_PigCopTank", "NarakaMorph_MiniBattleLord", "NarakaMorph_CycloidEmperor"},
		{ "NarakaMorph_PigCop", "NarakaMorph_AssaultCommander", "NarakaMorph_PigCopTank", "NarakaMorph_MiniBattleLord", "NarakaMorph_CycloidEmperor"},
	},
	{
		{ "NarakaMorph_ProjectileFighterMajor", "NarakaMorph_SphtKrMajor", "NarakaMorph_MotherofAllHunters", "NarakaMorph_MotherofAllCyborgs", "NarakaMorph_JuggernautMajor"},
	},
	{
		{ "NarakaMorph_QGrunt", "NarakaMorph_QMultiOgre", "NarakaMorph_QVore", "NarakaMorph_QOverlord", "NarakaMorph_QDragon"},
	},
	{
		{ "NarakaMorph_LightningGuard", "NarakaMorph_RobotGuard", "NarakaMorph_TriadEnforcer", "NarakaMorph_GeneralDarian", "NarakaMorph_ElOscuro"},
		{ "NarakaMorph_LightningGuard", "NarakaMorph_RobotGuard", "NarakaMorph_TriadEnforcer", "NarakaMorph_GeneralDarian", "NarakaMorph_ElOscuro"},
		{ "NarakaMorph_LightningGuard", "NarakaMorph_RobotGuard", "NarakaMorph_TriadEnforcer", "NarakaMorph_GeneralDarian", "NarakaMorph_ElOscuro"},
		{ "NarakaMorph_LightningGuard", "NarakaMorph_RobotGuard", "NarakaMorph_TriadEnforcer", "NarakaMorph_GeneralDarian", "NarakaMorph_ElOscuro"},
		{ "NarakaMorph_LightningGuard", "NarakaMorph_RobotGuard", "NarakaMorph_TriadEnforcer", "NarakaMorph_GeneralDarian", "NarakaMorph_ElOscuro"},
	},
	{
		{ "NarakaMorph_SectorGuard", "NarakaMorph_StarTrooper", "NarakaMorph_BioMech", "NarakaMorph_SpiderMutant", "NarakaMorph_Goldfire"},
		{ "NarakaMorph_SectorGuard", "NarakaMorph_StarTrooper", "NarakaMorph_BioMech", "NarakaMorph_SpiderMutant", "NarakaMorph_Goldfire"},
	},
	{
		{ "NarakaMorph_Cultist", "NarakaMorph_Butcher", "NarakaMorph_BloodGargoyle", "NarakaMorph_BloodBeast", "NarakaMorph_Tchernobog"},
	},
	{
		{ "NarakaMorph_Acolyte", "NarakaMorph_Templar", "NarakaMorph_Crusader", "NarakaMorph_Programmer", "NarakaMorph_Entity"},
	},
	{
		{ "NarakaMorph_LSD", "NarakaMorph_HSD", "NarakaMorph_LSD2", "NarakaMorph_RotoDroid", "NarakaMorph_Gor"},
	},
	{
		{ "NarakaMorph_AnimatedProbe", "NarakaMorph_Semaj", "NarakaMorph_Ttocs", "NarakaMorph_Eniram", "NarakaMorph_Tebazile"},
	},
	{
		{ "NarakaMorph_UNBluesuit", "NarakaMorph_BlacksuitStriker", "NarakaMorph_RMRHoverGunner", "NarakaMorph_BigEstronBeast", "NarakaMorph_SubestronBoss"},
	},
	{
		{ "NarakaMorph_Stormtrooper", "NarakaMorph_Gamorrean", "NarakaMorph_ProbeDroid", "NarakaMorph_BobaFett", "NarakaMorph_PhaseIII"},
	},
	{
		{ "NarakaMorph_IPOGHuntress", "NarakaMorph_IPOGBerserker", "NarakaMorph_IPOGGuard", "NarakaMorph_IPOGWizard", "NarakaMorph_IPOGChancellor"},
	},
	{
		{ "NarakaMorph_Cryopirate", "NarakaMorph_TerroristDroid", "NarakaMorph_MBrute", "NarakaMorph_Disruptor", "NarakaMorph_Krieger"},
	},
	{
		{ "NarakaMorph_Argothonian", "NarakaMorph_MuckDemoness", "NarakaMorph_MinoDrake", "NarakaMorph_MidianWarrior", "NarakaMorph_CiraeArgoth"},
	},
	{
		{ "NarakaMorph_ShotgunGuy", "NarakaMorph_Spectre", "NarakaMorph_Cacodemon", "NarakaMorph_Baron", "NarakaMorph_Cyberdemon"},
	},
	{
		{ "NarakaMorph_SWNinja", "NarakaMorph_SWAssassin", "NarakaMorph_SWRipper", "NarakaMorph_SerpentGod", "NarakaMorph_MasterZilla"},
	},
	{
		{ "NarakaMorph_Metacop", "NarakaMorph_Stynx", "NarakaMorph_Aircar", "NarakaMorph_CMTank", "NarakaMorph_NeCrom"},
	},
	{
		{ "NarakaMorph_AnubisWarrior", "NarakaMorph_KilmaatSentry", "NarakaMorph_OmenWasp", "NarakaMorph_ExMummy", "NarakaMorph_ExMummy"},
	},
	{
		{ "NarakaMorph_FrankDoyle", "NarakaMorph_SheriffHobbes", "NarakaMorph_AlienHulk", "NarakaMorph_AlienVixen", "NarakaMorph_Assface"},
	},
	{
		{ "NarakaMorph_ShotgunGuy", "NarakaMorph_Spectre", "NarakaMorph_Cacodemon", "NarakaMorph_Baron", "NarakaMorph_Cyberdemon"},
	},
	{
		{ "NarakaMorph_ShotgunGuy", "NarakaMorph_Spectre", "NarakaMorph_Cacodemon", "NarakaMorph_Baron", "NarakaMorph_Cyberdemon"},
	},
	{
		{ "NarakaMorph_ShotgunGuy", "NarakaMorph_Spectre", "NarakaMorph_Cacodemon", "NarakaMorph_Baron", "NarakaMorph_Cyberdemon"},
	},
	{
		{ "NarakaMorph_C3DMage", "NarakaMorph_CASuccubus", "NarakaMorph_CATreant", "NarakaMorph_CATwoHeadedDemon", "NarakaMorph_CPNemesis"},
	},
	{
		{ "NarakaMorph_ShotgunGuy", "NarakaMorph_Spectre", "NarakaMorph_Cacodemon", "NarakaMorph_Baron", "NarakaMorph_Cyberdemon"},
	},
	{
		{ "NarakaMorph_ShotgunGuy", "NarakaMorph_Spectre", "NarakaMorph_Cacodemon", "NarakaMorph_Baron", "NarakaMorph_Cyberdemon"},
	},
	{
		{ "NarakaMorph_ShotgunGuy", "NarakaMorph_Spectre", "NarakaMorph_Cacodemon", "NarakaMorph_Baron", "NarakaMorph_Cyberdemon"},
	},
	{
		{ "NarakaMorph_ShotgunGuy", "NarakaMorph_Spectre", "NarakaMorph_Cacodemon", "NarakaMorph_Baron", "NarakaMorph_Cyberdemon"},
	},
	{
		{ "NarakaMorph_ShotgunGuy", "NarakaMorph_Spectre", "NarakaMorph_Cacodemon", "NarakaMorph_Baron", "NarakaMorph_Cyberdemon"},
	},
	{
		{ "NarakaMorph_ShotgunGuy", "NarakaMorph_Spectre", "NarakaMorph_Cacodemon", "NarakaMorph_Baron", "NarakaMorph_Cyberdemon"},
	},
};

Script "MonsterSphereInitiate" (void)
{
	int class = PlayerClass(PlayerNumber());
	int hudboundsx = 1440;
	int hudboundsy = 972;
	int cursorx = hudboundsx/2;
	int cursory = hudboundsy/2;
	int hudcenterx = hudboundsx/2;
	int hudcentery = hudboundsy/2;
	int hoverindex, lasthover;
	int squarecenter = FixedDiv(hudboundsx+hudboundsy,2.0);
	int breakloop = false;
	SetPlayerProperty(0,1,PROP_TOTALLYFROZEN);
	TakeInventory("AlreadySpawned",1);
	TakeInventory("NarakaPlayerFlight",1);
	UnMorphActor(0,1);
	
	until(breakloop)
	{			
		int mouseX = GetCvar("m_yaw") + 0.2;
		int mouseY = GetCvar("m_pitch") + 0.2;
		int yaw = GetPlayerInput(-1, INPUT_YAW);
		int pitch = GetPlayerInput(-1, INPUT_PITCH);
		int buttons = GetPlayerInput(-1, INPUT_BUTTONS);
		int oldbuttons = GetPlayerInput(-1, INPUT_OLDBUTTONS);
		if(buttons & BT_USE || buttons & BT_ATTACK)
			breakloop = 1;
	
		if(yaw > 1 || yaw < -1)
			cursorx -= FixedMul(yaw/16,mouseX);
		
		if(pitch > 1 || pitch < -1)
			cursory -= FixedMul(pitch/16,mouseY);
		
		if(cursorx < 0)
			cursorx = 0;	
		else if(cursorx > hudboundsx)
			cursorx = hudboundsx;
			
		if(cursory < 0)
			cursory = 0;
		else if(cursory > hudboundsy)
			cursory = hudboundsy;
			
		SetFont("SXHCURS");
		SetHudSize(hudboundsx,hudboundsy,true);
		HudMessage(s:"a"; HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD, 15986, CR_UNTRANSLATED, (cursorx*1.0), (cursory*1.0), 1.0);
		
		int wheelangle = 0.0;
		int wheelItems = MAXTIERS+1;
		int cursorAngle = VectorAngle(cursorx - hudcenterx, cursory - hudcentery);
		int cursorDistance = VectorLength(cursorx - hudcenterx, cursory - hudcentery);
		int sector = 1.0/wheelItems;
		int halfsector = sector/2;
		for(int a = 0; a < wheelItems; a++)
		{		
			//SetHudClipRect(hudcenterx-64,16,128,rectboundariesy+16);
			//HudMessage(s:ClassInfo[a][0]; HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD, 16000+a, CR_UNTRANSLATED, hudcenterx*1.0, offsety*1.0, 1.0);
			int locationx = hudcenterx+((squarecenter/4*cos(wheelangle+(FixedDiv(1.0,wheelItems*1.0)*a)))>>16);
			int locationy = hudcentery+((squarecenter/4*sin(wheelangle+(FixedDiv(1.0,wheelItems*1.0)*a)))>>16);
			if(cursorAngle < 0) cursorAngle += 1.0;
			int pass = a == 0 ? (cursorAngle - 1.0) > -halfsector || cursorAngle < halfsector : cursorAngle > ((a * sector) - halfsector) && cursorAngle < ((a * sector) + halfsector);
			SetFont("CMPSDOOM");
			if(pass)
			{
				hoverindex = a+1;
				if(hoverindex != lasthover && hoverindex != 0)	{ lasthover = hoverindex; /*LocalAmbientSound("Compendium/Hover",104);*/ }		
				HudMessage(s:a == 0 ? "Exit" : MonsterTiers[class][CheckInventory("SamsaraModeCounter")][a-1]; HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA, 16000+a, "white", locationx*1.0, locationy*1.0, 1.0, 0.9);
			}
			else
			{
				HudMessage(s:a == 0 ? "Exit" : MonsterTiers[class][CheckInventory("SamsaraModeCounter")][a-1]; HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING|HUDMSG_ALPHA, 16000+a, "black", locationx*1.0, locationy*1.0, 1.0, 0.9); 	
				locationx = hudcenterx+((squarecenter/4*cos(wheelangle+(FixedDiv(1.0,wheelItems*1.0)*(lasthover-1))))>>16);
				locationy = hudcentery+((squarecenter/4*sin(wheelangle+(FixedDiv(1.0,wheelItems*1.0)*(lasthover-1))))>>16);
			}
			//SetHudClipRect(0,0,0,0);
		}
			
		Delay(1);
	}
	
	if(hoverindex > 1)
	{
		MorphActor(0, MonsterTiers[class][CheckInventory("SamsaraModeCounter")][hoverindex-2], "", 0x7FFFFFFF, MRF_ADDSTAMINA|MRF_FULLHEALTH|MRF_UNDOBYTOMEOFPOWER|MRF_LOSEACTUALWEAPON|MRF_NEWTIDBEHAVIOUR,"ACSSpawnDummy","ACSSpawnDummy");
		SetActorProperty(0,APROP_Health,GetActorProperty(0,APROP_SpawnHealth));
		SetActorProperty(0,APROP_SoundClass,"");
	}
	
	SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
}

Script "Samsara_MorphMonsterFunctions" (int class, int tier, int action)
{
	int x, y, z;
	switch(class)
	{
		// Chex
		case 1:
			switch(tier)
			{
				case 3:
					switch(action)
					{
						case 0:
							SetActorState(0,"MissileSpray",true);
							break;
						case 1:
							SetActorState(0,"MissileRapid",true);
							break;
						case 2:
							SetActorState(0,"MissileHeavy",true);
							break;
						case 3:
							SetActorState(0,"MissileGrenade",true);
							break;
						case 4:
							SetActorState(0,"Melee",true);
							break;
					}
					break;
				case 4:
					switch(action)
					{
						case 0:
							SetActorState(0,"StandardFire",true);
							break;
						case 1:
							SetActorState(0,"VolleyFire",true);
							break;
					}
					break;
			}
			break;
		// Quake
		case 7:
			SetActorProperty(0,APROP_Speed,8.0);
			Delay(40);
			SetActorProperty(0,APROP_Speed,1.0);
			break;
		// Rise of the Triad
		case 8:
			switch(tier)
			{
				case 0:
					switch(action)
					{
						case 0:
							SetActorState(0,"BeginPlead",true);
							break;
						case 1:
							SetActorState(0,"Rising",true);
							break;
						case 2:
							SetActorState(0,"PistolFire",true);
							break;
						case 3:
							SetActorState(0,"MissileFire",true);
							break;
						case 4:
							SetActorState(0,"Stealing",true);
							break;
						case 5:
							SetActorState(0,"MissileSlowFire",true);
							break;
						case 6:
							SetActorState(0,"MachineGunFire",true);
							break;
						case 7:
							SetActorState(0,"BatFire",true);
							break;
						case 8:
							SetActorState(0,"StaffFire",true);
							break;
					}
					break;
				case 2:
					switch(action)
					{
						case 0:
							SetActorState(0,"MachineGun",true);
							break;
						case 1:
							SetActorState(0,"Throw",true);
							break;
					}
					break;
				case 3:
					if(action == 1)
					{
						x = GetActorX(0);
						y = GetActorY(0);
						z = GetActorFloorZ(0);
						SetActivator(0,AAPTR_Target);
						SetActorPosition(0,x,y,z,0);
					}
					break;
				case 4:
					switch(action)
					{
						case 0:
							SetActorState(0,"LightningStorm",true);
							break;
						case 1:
							SetActorState(0,"FlameFace",true);
							break;
						case 2:
							SetActorState(0,"GreenBlast",true);
							break;
						case 3:
							SetActorState(0,"RedBlast",true);
							break;
						case 4:
							SetActorState(0,"FlameSpit",true);
							break;
						case 5:
							SetActorState(0,"FlameGround",true);
							break;
						case 6:
							SetActorState(0,"DarkMatter",true);
							break;
					}
					break;
			}
			break;
		// Blake Stone
		case 9:
			switch(tier)
			{
				case 4:
					switch(action)
					{
						case 0:
							while(ClassifyActor(0) & ACTOR_Alive && !CheckInventory("NarakaMorph_GoldFireBossConverter"))
							{
								if(GetActorProperty(0,APROP_Health) <= 1)
								{
									GiveInventory("NarakaMorph_GoldFireBossConverter",1);
									SetActorState(0,"ConvertToBoss",true);
									SetActorProperty(0,APROP_SpawnHealth,4800);
									SetActorProperty(0,APROP_Health,4800);
								}
								Delay(1);
							}
							break;
						case 1:
							GiveInventory("NarakaMorph_GoldFireBossConverter",1);
							SetActorState(0,"ConvertToBoss",true);
							SetActorProperty(0,APROP_SpawnHealth,4800);
							SetActorProperty(0,APROP_Health,4800);
							break;
					}
					break;
			}
			break;
		// Strife
		case 11:
			switch(tier)
			{
				case 0:
					switch(action)
					{
						case 0:
							SetActorState(0,"BulletAttack",true);
							break;
					}
					break;
				case 2:
					switch(action)
					{
						case 0:
							SetActorState(0,"MissileAttack",true);
							break;
					}
					break;
				case 4:
					switch(action)
					{
						case 0:
							SetActorState(0,"SigilAttack",true);
							break;
						case 1:
							SetActorState(0,"MeleeAttack",true);
							break;
						case 2:
							while(ClassifyActor(0) & ACTOR_Alive && !CheckInventory("NarakaMorph_EntityBossConverter"))
							{
								if(GetActorProperty(0,APROP_Health) <= 1)
								{
									GiveInventory("Morph_EntityBossConverter",1);
									SetActorProperty(0,APROP_SpawnHealth,990);
									SetActorProperty(0,APROP_Health,990);
									SetActorState(0,"Split",true);
								}
								Delay(1);
							}
							break;
					}
					break;
			}
			break;
		// Corridor 7
		case 13:
			switch(tier)
			{
				case 4:
					switch(action)
					{
						case 0:
							while(ClassifyActor(0) & ACTOR_Alive && !CheckInventory("NarakaMorph_TebazileBossConverter"))
							{
								if(GetActorProperty(0,APROP_Health) <= 1)
								{
									GiveInventory("NarakaMorph_TebazileBossConverter",1);
									SetActorState(0,"ConvertToBoss",true);
								}
								Delay(1);
							}
							break;
						case 1:
							GiveInventory("NarakaMorph_TebazileBossConverter",1);
							SetActorState(0,"ConvertToBoss",true);
							break;
						case 2:
							GiveInventory("NarakaMorph_TebazileBossConverter",1);
							SetActorState(0,"ConvertToBoss2",true);
							break;
						case 3:
							GiveInventory("NarakaMorph_TebazileBossConverter",1);
							SetActorState(0,"ConvertToBoss3",true);
							break;
						case 4:
							TakeInventory("NarakaMorph_TebazileBossConverter",3);
							SetActorState(0,"ConvertToBoss4",true);
							break;
					}
					break;
			}
			break;
		// Witchaven
		case 18:
			switch(tier)
			{
				case 4:
					switch(action)
					{
						case 0:
							SetActorState(0,"FireMissile",true);
							break;
						case 1:
							SetActorState(0,"NukeMissile",true);
							break;
					}
					break;
			}
			break;
		// Shadow Warrior
		case 20:
			switch(tier)
			{
				case 0:
					switch(action)
					{
						case 0:
							SetActorState(0,"GunMissile",true);
							break;
						case 1:
							SetActorState(0,"ShurikenMissile",true);
							break;
					}
					break;
				case 1:
					switch(action)
					{
						case 0:
							SetActorState(0,"DartMissile",true);
							break;
						case 1:
							SetActorState(0,"BombMissile",true);
							break;
					}
					break;
				case 4:
					switch(action)
					{
						case 0:
							SetActorState(0,"RocketMissile",true);
							break;
						case 1:
							SetActorState(0,"GunMissile",true);
							break;
						case 2:
							SetActorState(0,"RailgunMissile",true);
							break;
					}
					break;
			}
			break;
		// Cybermage: Darklight Awakening
		case 21:
			switch(tier)
			{
				case 4:
					switch(action)
					{
						case 0:
							SetActorState(0,"RangedMissile",true);
							break;
						case 1:
							SetActorState(0,"MeleeMissile",true);
							break;
					}
					break;
			}
			break;
		// Exhumed
		case 22:
			switch(tier)
			{
				case 0:
					switch(action)
					{
						case 0:
							SetActorState(0,"MeleeMissile",true);
							break;
						case 1:
							SetActorState(0,"ProjectileMissile",true);
							break;
					}
					break;
				case 3:
					switch(action)
					{
						case 0:
							SetActorState(0,"MeleeMissile",true);
							break;
						case 1:
							SetActorState(0,"ProjectileMissile",true);
							break;
					}
					break;
			}
			break;
		// Redneck Rampage
		case 24:
			switch(tier)
			{
				case 0:
					switch(action)
					{
						case 0:
							SetActorState(0,"ShotgunAttack",true);
							break;
						case 1:
							SetActorState(0,"Pee",true);
							break;
					}
					break;
				case 1:
					switch(action)
					{
						case 0:
							SetActorState(0,"ReloadPistols",true);
							break;
					}
					break;
				case 2:
					switch(action)
					{
						case 0:
							SetActorState(0,"Laser",true);
							break;
						case 1:
							SetActorState(0,"LandMine",true);
							break;
						case 2:
							SetActorState(0,"MeleeAttack",true);
							break;
						case 3:
							UnMorphActor(0,1);
							MorphActor(0, "NarakaMorph_AlienHulkRevive", "", 0x7FFFFFFF, MRF_ADDSTAMINA|MRF_FULLHEALTH|MRF_UNDOBYTOMEOFPOWER|MRF_LOSEACTUALWEAPON|MRF_NEWTIDBEHAVIOUR,"ACSSpawnDummy","ACSSpawnDummy");
							SetActorProperty(0,APROP_Health,GetActorProperty(0,APROP_SpawnHealth));
							break;
						case 4:
							SetPlayerProperty(0,1,PROP_BUDDHA);
							while(ClassifyActor(0) & ACTOR_Alive)
							{
								if(GetActorProperty(0,APROP_Health) <= 1)
								{
									SetActorState(0,"FakeDeath",true);
									SetPlayerProperty(0,0,PROP_BUDDHA);
								}
								Delay(1);
							}
							break;
						case 5:
							UnMorphActor(0,1);
							MorphActor(0, "NarakaMorph_AlienHulk", "", 0x7FFFFFFF, MRF_ADDSTAMINA|MRF_FULLHEALTH|MRF_UNDOBYTOMEOFPOWER|MRF_LOSEACTUALWEAPON|MRF_NEWTIDBEHAVIOUR,"ACSSpawnDummy","ACSSpawnDummy");
							SetActorProperty(0,APROP_Health,GetActorProperty(0,APROP_SpawnHealth));
							break;
					}
					break;
				case 3:
					switch(action)
					{
						case 0:
							SetActorState(0,"TeatFire",true);
							break;
						case 1:
							SetActorState(0,"Dildo1",true);
							break;
						case 2:
							SetActorState(0,"Dildo2",true);
							break;
						case 3:
							SetActorState(0,"DoTeleport",true);
							break;
						case 4:
							SetActorState(0,"Kick",true);
							break;
						case 5:
							x = GetActorX(0);
							y = GetActorY(0);
							z = GetActorFloorZ(0);
							SetActivator(0,AAPTR_Target);
							SetActorPosition(0,x,y,z,0);
							break;
					}
					break;
				case 4:
					switch(action)
					{
						case 0:
							SetActorState(0,"ShitThrow",true);
							break;
						case 1:
							SetActorState(0,"ShitSpit",true);
							break;
					}
					break;
			}
			break;
	}
}